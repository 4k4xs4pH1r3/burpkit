{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to BurpKit\n\n\nWelcome to the next generation of web application penetration testing - using WebKit to own the web.\nBurpKit is a BurpSuite plugin which helps in assessing complex web apps that render the contents of\ntheir pages dynamically. As part of its rich feature set, BurpKit  provides a bi-directional\nJavaScript bridge API which allows users to quickly create BurpSuite plugins  which can interact \ndirectly with the DOM and Burp's extender API at the same time. This permits BurpSuite plugin\ndevelopers to run their web application testing logic directly within the DOM itself whilst taking\nadvantage of BurpSuite's other features as well!\n\n\nFor example, imagine building an intruder payload generator that dynamically generates a word list\nwhile crawling a Web 2.0 web application such as Twitter. Or maybe using the BurpScript extensions\nto scrape web pages and save those results to a file. What about building a better web spider that \ncan render AJAX-based pages and send discovered content to the active scanner? All this can be done\nwith BurpKit and more! \n\n\n\n\nGetting Started\n\n\nSystem Requirements\n\n\nBurpKit has the following system requirements:\n\n\n\n\nOracle JDK \n=8u50 and \n9 (\nDownload\n)\n\n\nAt least 4GB of RAM\n\n\n\n\nInstallation\n\n\nInstalling BurpKit is simple:\n\n\n\n\nDownload the latest prebuilt release from the \nGitHub releases page\n.\n\n\nOpen BurpSuite and navigate to the \nExtender\n tab.\n\n\nUnder \nBurp Extensions\n click the \nAdd\n button.\n\n\nIn the \nLoad Burp Extension\n dialog, make sure that \nExtension Type\n is set to \nJava\n and click the \nSelect file ...\n button under \nExtension Details\n.\n\n\nSelect the \nBurpKit-\nversion\n.jar\n file and click \nNext\n when done.\n\n\n\n\nIf all goes well, you will see three additional top-level tabs appear in BurpSuite:\n\n\n\n\nBurpKitty\n: a courtesy browser for navigating the web within BurpSuite.\n\n\nBurpScript IDE\n: a lightweight integrated development environment for writing JavaScript-based BurpSuite plugins and other things.\n\n\nJython\n: an integrated python interpreter console and lightweight script text editor.\n\n\n\n\nCompiling BurpKit\n\n\nBurpKit is distributed as an \nIntelliJ IDEA\n project. Once the project is opened in IntelliJ, compilation should be trivial. The JAR file can be built using the \nBuild Artifacts...\n menu item under the \nBuild\n menu. The compiled output will appear under the \nout\n directory.\n\n\nKnown Issues\n\n\nThe following sections detail known issues that have been discovered within BurpKit and possible workarounds.\n\n\nNo Upstream Proxy Support\n\n\nUpstream proxies set within BurpSuite's \nOptions\n tab are currently not supported as there exists no way to monitor BurpSuite setting modifications. Therefore, upstream proxies will have to be configured at the system level or via the Java command line arguments. BurpKit may leverage BurpSuite's internal request framework in future releases.\n\n\nBlank Tabs\n\n\nUnhandled exceptions within the JavaFX event loop may trigger this condition. Currently, BurpKit-v1.01-pre attempts to resolve this issue. If you are still experiencing this issue, please run BurpSuite from the command line (e.g. \njava -jar burpsuite_\nversion\n.jar -Xmx4g\n)  and \nopen a GitHub issue\n with the following details:\n\n\n\n\nOS and system details (please include RAM size);\n\n\nConsole output, if any;\n\n\nJava version (\njava -version\n); and\n\n\nBurpSuite runtime arguments, if applicable.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-burpkit", 
            "text": "Welcome to the next generation of web application penetration testing - using WebKit to own the web.\nBurpKit is a BurpSuite plugin which helps in assessing complex web apps that render the contents of\ntheir pages dynamically. As part of its rich feature set, BurpKit  provides a bi-directional\nJavaScript bridge API which allows users to quickly create BurpSuite plugins  which can interact \ndirectly with the DOM and Burp's extender API at the same time. This permits BurpSuite plugin\ndevelopers to run their web application testing logic directly within the DOM itself whilst taking\nadvantage of BurpSuite's other features as well!  For example, imagine building an intruder payload generator that dynamically generates a word list\nwhile crawling a Web 2.0 web application such as Twitter. Or maybe using the BurpScript extensions\nto scrape web pages and save those results to a file. What about building a better web spider that \ncan render AJAX-based pages and send discovered content to the active scanner? All this can be done\nwith BurpKit and more!", 
            "title": "Welcome to BurpKit"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "BurpKit has the following system requirements:   Oracle JDK  =8u50 and  9 ( Download )  At least 4GB of RAM", 
            "title": "System Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "Installing BurpKit is simple:   Download the latest prebuilt release from the  GitHub releases page .  Open BurpSuite and navigate to the  Extender  tab.  Under  Burp Extensions  click the  Add  button.  In the  Load Burp Extension  dialog, make sure that  Extension Type  is set to  Java  and click the  Select file ...  button under  Extension Details .  Select the  BurpKit- version .jar  file and click  Next  when done.   If all goes well, you will see three additional top-level tabs appear in BurpSuite:   BurpKitty : a courtesy browser for navigating the web within BurpSuite.  BurpScript IDE : a lightweight integrated development environment for writing JavaScript-based BurpSuite plugins and other things.  Jython : an integrated python interpreter console and lightweight script text editor.", 
            "title": "Installation"
        }, 
        {
            "location": "/#compiling-burpkit", 
            "text": "BurpKit is distributed as an  IntelliJ IDEA  project. Once the project is opened in IntelliJ, compilation should be trivial. The JAR file can be built using the  Build Artifacts...  menu item under the  Build  menu. The compiled output will appear under the  out  directory.", 
            "title": "Compiling BurpKit"
        }, 
        {
            "location": "/#known-issues", 
            "text": "The following sections detail known issues that have been discovered within BurpKit and possible workarounds.  No Upstream Proxy Support  Upstream proxies set within BurpSuite's  Options  tab are currently not supported as there exists no way to monitor BurpSuite setting modifications. Therefore, upstream proxies will have to be configured at the system level or via the Java command line arguments. BurpKit may leverage BurpSuite's internal request framework in future releases.  Blank Tabs  Unhandled exceptions within the JavaFX event loop may trigger this condition. Currently, BurpKit-v1.01-pre attempts to resolve this issue. If you are still experiencing this issue, please run BurpSuite from the command line (e.g.  java -jar burpsuite_ version .jar -Xmx4g )  and  open a GitHub issue  with the following details:   OS and system details (please include RAM size);  Console output, if any;  Java version ( java -version ); and  BurpSuite runtime arguments, if applicable.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/burpScript/", 
            "text": "Overview\n\n\nBurpScript is a JavaScript langauge extension that provides additional language features within WebKit's JS engine such as:\n\n\n\n\nFilesystem I/O - provides support for writing to and reading from files.\n\n\nScript injection - provides an easy interface for injecting libraries such as JQuery or other third-party libraries.\n\n\nBurpExtender - exposes the BurpSuite interface to the JS engine so that you can write your own BurpSuite plugins using JavaScript.\n\n\n\n\nBurpScript can be used to perform a variety of tasks ranging from OSINT automation scripts to full-fledged BurpSuite\nextensions. Take a look at the \nexamples\n folder in the code repository to see how BurpKit can be leveraged.", 
            "title": "BurpScript"
        }, 
        {
            "location": "/burpScript/#overview", 
            "text": "BurpScript is a JavaScript langauge extension that provides additional language features within WebKit's JS engine such as:   Filesystem I/O - provides support for writing to and reading from files.  Script injection - provides an easy interface for injecting libraries such as JQuery or other third-party libraries.  BurpExtender - exposes the BurpSuite interface to the JS engine so that you can write your own BurpSuite plugins using JavaScript.   BurpScript can be used to perform a variety of tasks ranging from OSINT automation scripts to full-fledged BurpSuite\nextensions. Take a look at the  examples  folder in the code repository to see how BurpKit can be leveraged.", 
            "title": "Overview"
        }, 
        {
            "location": "/API/callbacks-overview/", 
            "text": "The \nburpCallbacks\n object is automatically injected into the DOM every time a \ndocument.onload\n event is triggered. For the most part, the \nburpCallbacks\n object adheres to the \nIBurpExtenderCallbacks\n API detailed in \nBurpSuite's documentation\n. In short, the following differences can be observed:\n\n\n\n\nAll constants (i.e. \nPARAM_XML\n, \nCONTENT_TYPE_UNKNOWN\n, \nINS_HEADER\n, etc.) can be found as read-only properties within the \nburpCallbacks\n object (i.e. \nburpCallbacks.PARAM_XML\n).\n\n\nGUI-based BurpSuite extensions that operate in the \nSWING\n thread have slightly modified APIs to avoid deadlocks caused by event loop inter-weaving.\n\n\nAdditional helper functions have been provided to ease and augment the interaction between JavaScript and BurpSuite.\n\n\nMethods with the same name but multiple signatures (i.e. \nfoo(String)\n, \nfoo(String, int)\n, etc.) are numbered due to limitations within JavaScript (i.e. \nfoo(String)\n, \nfoo2(String, int)\n, etc.).\n\n\n\n\nThe following example demonstrates how one could easily create a simple proxy listener using JavaScript with the BurpKit extensions:\n\n\n// inject an HTTP helper library for message parsing\nburpKit.requireLib('httplib');\n\n// Get our burp helpers\nvar helpers = burpCallbacks.getHelpers();\n\n// Register our proxy listener\nburpCallbacks.registerProxyListener(function(isRequest, message) {\n  var messageInfo = message.getMessageInfo();\n  if (isRequest) {\n    var request = httplib.parseRequest(helpers.bytesToString(messageInfo.getRequest()));\n    alert(\n \n + request.method + \n \n + messageInfo.getUrl().toString());\n  } else {            \n    var response = httplib.parseResponse(helpers.bytesToString(messageInfo.getResponse()));\n    alert(\n \n + response.statusCode + \n \n + response.statusMessage);\n  }\n});\n\n\n\n\nThis is just a simple example of how powerful BurpKit is. Many more examples can be found in the bundled \nexamples\n directory that comes with BurpKit. The following subsections detail the methods available within the \nburpCallbacks\n object.", 
            "title": "Overview"
        }, 
        {
            "location": "/API/callbacks-api/", 
            "text": "setExtensionName(String name)\n\n\nSets the name of the BurpKit extension since all BurpScript extensions are operating under the context of the BurpKit plugin.\n\n\nParameters:\n\n\n\n\nname\n: the name you wish to set for this extension.\n\n\n\n\nExample:\n\n\nburpCallbacks.setExtensionName('foo');\n\n\n\n\n\n\ngetHelpers()\n\n\nReturns an instance of the \nExtensionHelpersBridge\n object, which adheres to the API of the \nIExtensionHelpers\n interface with a few minor exceptions. See the \nExtensionHelpersBridge\n page for more details on the API.\n\n\nReturns:\n\nAn \nExtensionHelpersBridge\n object.\n\n\nExample:\n\n\nvar helpers = burpCallbacks.getHelpers();\nhelpers.urlDecode('%3cscript%3e'); // returns '\nscript\n'\n\n\n\n\n\n\ngetStdout()\n\n\nThis method is used to obtain the current extension's standard output stream. Extensions should write all output\nto this stream, allowing the Burp user to configure how that output is handled from within the UI.\n\n\nReturns:\n\nThe extension's standard output stream.\n\n\nExample:\n\n\nburpCallbacks.getStdout().write(\n  burpCallbacks.getHelpers().stringToBytes('Hello World!\\n')\n);\n\n\n\n\n\n\ngetStderr()\n\n\nThis method is used to obtain the current extension's standard error stream. Extensions should write all output\nto this stream, allowing the Burp user to configure how that output is handled from within the UI.\n\n\nReturns:\n\nThe extension's standard error stream.\n\n\nExample:\n\n\nburpCallbacks.getStderr().write(\n  burpCallbacks.getHelpers().stringToBytes('Hello World!\\n')\n);\n\n\n\n\n\n\nprintOutput(String message)\n\n\nThis method prints a line of output to the current extension's standard output stream.\n\n\nParameters:\n\n\n\n\nmessage\n - The message to print.\n\n\n\n\nExample:\n\n\nburpCallbacks.printOutput(\nhello\\n\n);\n\n\n\n\n\n\nprintError(String message)\n\n\nThis method prints a line of output to the current extension's standard error stream.\n\n\nParameters:\n\n\n\n\nmessage\n - The message to print.\n\n\n\n\nExample:\n\n\nburpCallbacks.printError(\nhello\\n\n);\n\n\n\n\n\n\nregisterExtensionStateListener(Object listener)\n\n\nThis method is used to register a listener which will be notified of changes to the extension's state. \nNote:\n Any\nextensions that start background threads or open system resources (such as files or database connections) should\nregister a listener and terminate threads / close resources when the extension is unloaded.\n\n\nParameters:\n\n\n\n\nlistener\n - An object created by the extension that implements the \nIExtensionStateListener\n interface or a lambda function that has the same prototype as the \nIExtensionStateListener.extensionUnloaded()\n method.\n\n\n\n\nReturns:\n\nThe Java instance of \nburp.IExtensionStateListener\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerExtensionStateListener(function() { \n  alert('Extension Unloaded!');\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerExtensionStateListener({\n  'extensionUnloaded': function() {\n    alert('Extension Unloaded!');\n  }\n});\n\n\n\n\n\n\ngetExtensionStateListeners()\n\n\nThis method is used to retrieve the extension state listeners that are registered by the extension.\n\n\nReturns:\n\nA list of extension state listeners that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getExtensionStateListeners();\n\n\n\n\n\n\nremoveExtensionStateListener(IExtensionStateListener listener)\n\n\nThis method is used to remove an extension state listener that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterExtensionStateListener()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based extension state listener. \n\n\nParameters:\n\n\n\n\nlistener\n - The extension state listener to be removed.\n\n\n\n\nExample:\n\n\nvar listener = burpCallbacks.registerExtensionStateListener(function() { \n  alert('Extension Unloaded!');\n});\n\nburpCallbacks.removeExtensionStateListener(listener);\n\n\n\n\n\n\nregisterHttpListener(Object listener)\n\n\nThis method is used to register a listener which will be notified of requests and responses made by any Burp tool.\nExtensions can perform custom analysis or modification of these messages by registering an HTTP listener.\n\n\nParameters:\n\n\n\n\nlistener\n - An object created by the extension that implements the \nIHttpListener\n interface or a lambda function that has the same prototype as the \nIHttpListener.processHttpMessage()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IHttpListener\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerHttpListener(function(toolFlag, isRequest, messageInfo) {\n  alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerHttpListener({\n  'processHttpMessage': function(toolFlag, isRequest, messageInfo) {\n    alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n  }\n});\n\n\n\n\n\n\ngetHttpListeners()\n\n\nThis method is used to retrieve the HTTP listeners that are registered by the extension.\n\n\nReturns:\n\nA list of HTTP listeners that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getHttpListeners();\n\n\n\n\n\n\nremoveHttpListener(IHttpListener listener)\n\n\nThis method is used to remove an HTTP listener that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterHttpListener()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based HTTP listener. \n\n\nParameters:\n\n\n\n\nlistener\n - The HTTP listener to be removed.\n\n\n\n\nExample:\n\n\nlistener = burpCallbacks.registerHttpListener({\n  'processHttpMessage': function(toolFlag, isRequest, messageInfo) {\n    alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n  }\n});\nburpCallbacks.removeHttpListener(listener);\n\n\n\n\n\n\nregisterProxyListener(Object listener)\n\n\nThis method is used to register a listener which will be notified of requests and responses being processed by\nthe Proxy tool. Extensions can perform custom analysis or modification of these messages, and control in-UI\nmessage interception, by registering a proxy listener.\n\n\nParameters:\n\n\n\n\nlistener\n - An object created by the extension that implements the \nIProxyListener\n interface or a lambda function that has the same prototype as the \nIHttpListener.processProxyMessage()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IProxyListener\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerProxyListener(function(isRequest, messageInfo) {\n  alert('Is request? ' + isRequest);\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerProxyListener({\n  'processProxyMessage': function(isRequest, messageInfo) {\n    alert('Is request? ' + isRequest);\n  }\n});\n\n\n\n\n\n\ngetProxyListeners()\n\n\nThis method is used to retrieve the Proxy listeners that are registered by the extension.\n\n\nReturns:\n\nA list of Proxy listeners that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getProxyListeners();\n\n\n\n\n\n\nremoveProxyListener(IProxyListener listener)\n\n\nThis method is used to remove a Proxy listener that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterProxyListener()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based proxy listener. \n\n\nParameters:\n\n\n\n\nlistener\n - The HTTP listener to be removed.\n\n\n\n\nExample:\n\n\nlistener = burpCallbacks.registerProxyListener(function(isRequest, messageInfo) {\n  alert('Is request? ' + isRequest);\n});\nburpCallbacks.removeProxyListener(listener);\n\n\n\n\n\n\nregisterScannerListener(Object listener)\n\n\nThis method is used to register a listener which will be notified of new issues that are reported by the Scanner\ntool. Extensions can perform custom analysis or logging of Scanner issues by registering a Scanner listener.\n\n\nParameters:\n\n\n\n\nlistener\n - An object created by the extension that implements the \nIScannerListener\n interface or a lambda function that has the same prototype as the \nIScannerListener.newScanIssue()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IScannerListener\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerScannerListener(function(scanIssue) {\n  alert('Got issue: ' + scanIssue.getIssueName());\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerScannerListener({\n  'processProxyMessage': function(isRequest, messageInfo) {\n    alert('Got issue: ' + scanIssue.getIssueName());\n  }\n});\n\n\n\n\n\n\ngetScannerListeners()\n\n\nThis method is used to retrieve the Scanner listeners that are registered by the extension.\n\n\nReturns:\n\nA list of Scanner listeners that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getScannerListeners();\n\n\n\n\n\n\nremoveScannerListener(IScannerListener listener)\n\n\nThis method is used to remove a Scanner listener that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterScannerListener()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based scanner listener. \n\n\nParameters:\n\n\n\n\nlistener\n - The Scanner listener to be removed.\n\n\n\n\nExample:\n\n\nlistener = burpCallbacks.registerScannerListener(function(scanIssue) {\n alert('Got issue: ' + scanIssue.getIssueName());\n});\nburpCallbacks.removeScannerListener(listener);\n\n\n\n\n\n\nregisterScopeChangeListener(Object listener)\n\n\nThis method is used to register a listener which will be notified of changes to Burp's suite-wide target scope.\n\n\nParameters:\n\n\n\n\nlistener\n - An object created by the extension that implements the \nIScopeChangeListener\n interface or a lambda function that has the same prototype as the \nIScannerListener.scopeChanged()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IScannerListener\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerScopeChangeListener(function() {\n  alert('Scope changed!');\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerScopeChangeListener({\n  'scopeChanged': function() {\n     alert('Scope changed!');\n  }\n});\n\n\n\n\n\n\ngetScopeChangeListeners()\n\n\nThis method is used to retrieve the scope change listeners that are registered by the extension.\n\n\nReturns:\n\nA list of scope change listeners that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getScopeChangeListeners();\n\n\n\n\n\n\nremoveScopeChangeListener(IScannerListener listener)\n\n\nThis method is used to remove a scope change listener that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterScopeChangeListener()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based scope change listener. \n\n\nParameters:\n\n\n\n\nlistener\n - The listener to be removed.\n\n\n\n\nExample:\n\n\nlistener = burpCallbacks.registerScopeChangeListener(function() {\n alert('Scope changed!');\n});\nburpCallbacks.removeScopeChangeListener(listener);\n\n\n\n\n\n\nregisterContextMenuFactory(Object factory)\n\n\nThis method is used to register a factory for custom context menu items. When the user invokes a context menu\nanywhere within Burp, the factory will be passed details of the invocation event, and asked to provide any\ncustom context menu items that should be shown.\n\n\nParameters:\n\n\n\n\nfactory\n - An object created by the extension that implements the \nIContextMenuFactory\n interface or a lambda function that has the same prototype as the \nIContextMenuFactory.createMenuItems()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IContextMenuFactory\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerContextMenuFactory(function(invocation) {\n  alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerContextMenuFactory({\n  'createMenuItems': function(invocation) {\n     alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n  }\n});\n\n\n\n\n\n\ngetContextMenuFactories()\n\n\nThis method is used to retrieve the context menu factories that are registered by the extension.\n\n\nReturns:\n\nA list of context menu factories that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getContextMenuFactories();\n\n\n\n\n\n\nremoveContextMenuFactory(IContextMenuFactory factory)\n\n\nThis method is used to remove a context menu factory that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterContextMenuFactory()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based context menu factory. \n\n\nParameters:\n\n\n\n\nfactory\n - The context menu factory to be removed.\n\n\n\n\nExample:\n\n\nfactory = burpCallbacks.registerContextMenuFactory(function(invocation) {\n  alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n});\nburpCallbacks.removeContextMenuFactory(factory);\n\n\n\n\n\n\nregisterMessageEditorTabFactory(Object factory)\n\n\nThis method is used to register a factory for custom message editor tabs. For each message editor that already\nexists, or is subsequently created, within Burp, the factory will be asked to provide a new instance of an\n\nburp.IMessageEditorTab\n object, which can provide custom rendering or editing of HTTP messages. \nNote:\n there is\na small difference between the interface provided by BurpSuite for \nIMessageEditorTabFactory\n and the interface\nof the JavaScript-based \nIMessageEditorTabFactory\n. An extra \ntextEditor\n parameter is passed to the \ncreateNewInstance()\n\nwhich contains an instance of \nITextEditor\n. This is done to avoid deadlocks due to interweaving call sequences between\nthe JavaFX and Swing event loops. \n\n\nParameters:\n\n\n\n\nfactory\n - An object created by the extension that implements a variant of the \nIMessageEditorTabFactory\n interface or a lambda function that has a variant of the prototype defined by the \nIMessageEditorTabFactory.createNewInstance()\n with an extra \ntextEditor\n parameter passed to \ncreateNewInstance()\n. See examples for nuances.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IMessageEditorTabFactory\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerMessageEditorTabFactory(function(controller, editable, textEditor) {\n  alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerMessageEditorTabFactory({\n  'createNewInstance': function(controller, editable, textEditor) {\n     alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n  }\n});\n\n\n\n\n\n\ngetMessageEditorTabFactories()\n\n\nThis method is used to retrieve the message editor tab factories that are registered by the extension.\n\n\nReturns:\n\nA list of message editor tab factories that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getMessageEditorTabFactories();\n\n\n\n\n\n\nremoveMessageEditorTabFactory(IMessageEditorTabFactory factory)\n\n\nThis method is used to remove a message editor tab factory that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterContextMenuFactory()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based message editor tab factory. \n\n\nParameters:\n\n\n\n\nfactory\n - The message editor tab factory to be removed.\n\n\n\n\nExample:\n\n\nfactory = burpCallbacks.registerMessageEditorTabFactory(function(controller, editable, textEditor) {\n  alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n});\nburpCallbacks.removeMessageEditorTabFactory(factory);\n\n\n\n\n\n\nregisterScannerInsertionPointProvider(Object provider)\n\n\nThis method is used to register a provider of Scanner insertion points. For each base request that is actively\nscanned, Burp will ask the provider to provide any custom scanner insertion points that are appropriate for the\nrequest.\n\n\nParameters:\n\n\n\n\nprovider\n - An object created by the extension that implements the \nIScannerInsertionPointProvider\n interface or a lambda function that has the same prototype as the \nIScannerInsertionPointProvider.getInsertionPoints()\n.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IScannerInsertionPointProvider\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerScannerInsertionPointProvider(function(baseRequestResponse) {\n  baseRequestResponse.setComment('BurpKit rules!');\n});\n\n\n\n\nor:\n\n\nburpCallbacks.registerScannerInsertionPointProvider({\n  'getInsertionPoints': function(baseRequestResponse) {\n     baseRequestResponse.setComment('BurpKit rules!');\n  }\n});\n\n\n\n\n\n\ngetScannerInsertionPointProviders()\n\n\nThis method is used to retrieve the Scanner insertion point providers that are registered by the extension.\n\n\nReturns:\n\nA list of Scanner insertion point providers that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getContextMenuFactories();\n\n\n\n\n\n\nremoveScannerInsertionPointProvider(IScannerInsertionPointProvider provider)\n\n\nNote:\n you must\npass the object returned from \nregisterScannerInsertionPointProvider()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based scope change listener. \n\n\nParameters:\n\n\n\n\nprovider\n - The scanner insertion point provider to be removed.\n\n\n\n\nExample:\n\n\nprovider = burpCallbacks.registerScannerInsertionPointProvider(function(baseRequestResponse) {\n  baseRequestResponse.setComment('BurpKit rules!');\n});\nburpCallbacks.removeScannerInsertionPointProvider(factory);\n\n\n\n\n\n\nregisterScannerCheck(Object check)\n\n\nThis method is used to register a custom Scanner check. When performing scanning, Burp will ask the check to\nperform active or passive scanning on the base request, and report any Scanner issues that are identified.\n\n\nParameters:\n\n\n\n\ncheck\n - An object created by the extension that implements the \nIScannerCheck\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IScannerCheck\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerScannerCheck({\n  'doPassiveScan': function(baseRequestResponse, newIssue) {\n    // do passive scan logic\n  },\n  'doActiveScan': function(baseRequestResponse, insertionPoint) {\n    // do active scan logic\n  },\n  'consolidateDuplicateIssues(existingIssue, newIssue) {\n    // do comparison\n    return 0;\n  }\n});\n\n\n\n\n\n\ngetScannerChecks()\n\n\nThis method is used to retrieve the Scanner checks that are registered by the extension.\n\n\nReturns:\n\nA list of Scanner checks that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getScannerChecks();\n\n\n\n\n\n\nremoveScannerCheck(IScannerCheck check)\n\n\nThis method is used to remove a Scanner check that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterScannerCheck()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based scanner check. \n\n\nParameters:\n\n\n\n\ncheck\n - The scanner check to be removed.\n\n\n\n\nExample:\n\n\ncheck = burpCallbacks.registerScannerCheck({\n  'doPassiveScan': function(baseRequestResponse, newIssue) {\n    // do passive scan logic\n  },\n  'doActiveScan': function(baseRequestResponse, insertionPoint) {\n    // do active scan logic\n  },\n  'consolidateDuplicateIssues(existingIssue, newIssue) {\n    // do comparison\n    return 0;\n  }\n});\nburpCallbacks.removeScannerCheck(check);\n\n\n\n\n\n\nregisterIntruderPayloadGeneratorFactory(Object factory)\n\n\nThis method is used to register a factory for Intruder payloads. Each registered factory will be available within\nthe Intruder UI for the user to select as the payload source for an attack. When this is selected, the factory\nwill be asked to provide a new instance of an \nburp.IIntruderPayloadGenerator\n object, which will\nbe used to generate payloads for the attack.\n\n\nParameters:\n\n\n\n\nfactory\n - An object created by the extension that implements the \nIIntruderPayloadGeneratorFactory\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IIntruderPayloadGeneratorFactory\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerIntruderPayloadGeneratorFactory({\n    'createNewInstance': function(attack) {\n        return new MyIntruderPayloadGenerator(attack); // your IIntruderPayloadGenerator object\n    },\n    'getGeneratorName': function() {\n        return 'foo';\n    }\n});\n\n\n\n\n\n\ngetIntruderPayloadGeneratorFactories()\n\n\nThis method is used to retrieve the Intruder payload generator factories that are registered by the extension.\n\n\nReturns:\n\nA list of Intruder payload generator factories that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getIntruderPayloadGeneratorFactories();\n\n\n\n\n\n\nremoveIntruderPayloadGeneratorFactory(IIntruderPayloadGeneratorFactory factory)\n\n\nThis method is used to remove an Intruder payload generator factory that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterIntruderPayloadGeneratorFactory()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based intruder payload generator factory. \n\n\nParameters:\n\n\n\n\nfactory\n - The intruder payload generator factory to be removed.\n\n\n\n\nExample:\n\n\nburpCallbacks.registerIntruderPayloadGeneratorFactory({\n    'createNewInstance': function(attack) {\n        return new MyIntruderPayloadGenerator(attack);\n    },\n    'getGeneratorName': function() {\n        return 'foo';\n    }\n});\nburpCallbacks.removeContextMenuFactory(factory);\n\n\n\n\n\n\nregisterIntruderPayloadProcessor(Object factory)\n\n\nThis method is used to register a custom Intruder payload processor. Each registered processor will be available\nwithin the Intruder UI for the user to select as the action for a payload processing rule.\n\n\nParameters:\n\n\n\n\nprocessor\n - An object created by the extension that implements the \nIIntruderPayloadProcessor\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.IIntruderPayloadProcessor\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerIntruderPayloadProcessor({\n  'getProcessorName': function() {\n     return 'BurpKit Processor';\n  },\n  'processPayload': function(currentPayload, originalPayload, baseValue) {\n     // change something\n     return modifiedBytes;\n  }\n});\n\n\n\n\n\n\ngetIntruderPayloadProcessors()\n\n\nThis method is used to retrieve the Intruder payload processors that are registered by the extension.\n\n\nReturns:\n\nA list of Intruder payload processors that are currently registered by this extension.\n\n\nExample:\n\n\nburpCallbacks.getIntruderPayloadProcessors();\n\n\n\n\n\n\nremoveIntruderPayloadProcessor(IContextMenuFactory factory)\n\n\nThis method is used to remove an Intruder payload processor that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterIntruderPayloadProcessor()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based intruder payload processor. \n\n\nParameters:\n\n\n\n\nprocessor\n - The intruder payload processor to be removed.\n\n\n\n\nExample:\n\n\nprocessor = burpCallbacks.registerIntruderPayloadProcessor({\n  'getProcessorName': function() {\n     return 'BurpKit Processor';\n  },\n  'processPayload': function(currentPayload, originalPayload, baseValue) {\n     // change something\n     return modifiedBytes;\n  }\n});\nburpCallbacks.removeIntruderPayloadProcessor(processor);\n\n\n\n\n\n\nregisterSessionHandlingAction(Object action)\n\n\nThis method is used to register a custom session handling action. Each registered action will be available within\nthe session handling rule UI for the user to select as a rule action. Users can choose to invoke an action\ndirectly in its own right, or following execution of a macro.\n\n\nParameters:\n\n\n\n\naction\n - An object created by the extension that implements the \nISessionHandlingAction\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.ISessionHandlingAction\n that was registered.\n\n\nExample:\n\n\nburpCallbacks.registerSessionHandlingAction({\n  'getActionName': function() {\n     return 'BurpKit Action';\n  },\n  'performAction': function(currentRequest, macroItems) {\n     // do something here\n  }\n});\n\n\n\n\n\n\ngetSessionHandlingActions()\n\n\nThis method is used to retrieve the session handling actions that are registered by the extension.\n\n\nReturns:\n\nThis method is used to retrieve the session handling actions that are registered by the extension.\n\n\nExample:\n\n\nburpCallbacks.getSessionHandlingActions();\n\n\n\n\n\n\nremoveSessionHandlingAction(ISessionHandlingAction action)\n\n\nThis method is used to remove a session handling action that has been registered by the extension. \nNote:\n you must\npass the object returned from \nregisterSessionHandlingAction()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based session handling action. \n\n\nParameters:\n\n\n\n\naction\n - The extension session handling action to be removed.\n\n\n\n\nExample:\n\n\naction = burpCallbacks.registerSessionHandlingAction({\n  'getActionName': function() {\n     return 'BurpKit Action';\n  },\n  'performAction': function(currentRequest, macroItems) {\n     // do something here\n  }\n});\nburpCallbacks.removeSessionHandlingAction(action);\n\n\n\n\n\n\nunloadExtension()\n\n\nThis method is used to unload the extension from Burp Suite. If called, \nBurpKit\n will be unloaded.\n\n\nExample:\n\n\nburpCallbacks.unloadExtension();\n\n\n\n\n\n\naddSuiteTab(Object tab)\n\n\nThis method is used to add a custom tab to the main Burp Suite window. \n\n\nParameters:\n\n\n\n\ntab\n - An object created by the extension that implements the \nITab\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.ITab\n that was created.\n\n\nExample:\n\n\nburpCallbacks.addTab({\n    'getTabCaption': function() {\n        return 'foo';\n    },\n    'getUiComponent': function() {\n        return new MyUiComponent();\n    }\n});\n\n\n\n\n\n\nremoveSuiteTab(ITab tab)\n\n\nThis method is used to remove a previously-added tab from the main Burp Suite window. \nNote:\n you must\npass the object returned from \naddSuiteTab()\n instead of the JavaScript object if you are trying to\nremove a JavaScript-based tab. \n\n\nParameters:\n\n\n\n\ntab\n - An object created by the extension that implements the \nITab\n interface.\n\n\n\n\nReturns:\n\nThe instance of \nburp.ITab\n that was created.\n\n\nExample:\n\n\nburpCallbacks.addTab({\n    'getTabCaption': function() {\n        return 'foo';\n    },\n    'getUiComponent': function() {\n        return new MyUiComponent();\n    }\n});\n\n\n\n\n\n\ncustomizeUiComponent(Component component)\n\n\nThis method is used to customize UI components in line with Burp's UI style, including font size, colors, table\nline spacing, etc. The action is performed recursively on any child components of the passed-in component.\n\n\nParameters:\n\n\n\n\ncomponent\n - The UI component to be customized.\n\n\n\n\nExample:\n\n\nburpCallbacks.customizeUiComponent(component);\n\n\n\n\n\n\ncreateMessageEditor(Object controller, boolean editable, JSObject callback)\n\n\nThis method is used to create a new instance of Burp's HTTP message editor, for the extension to use in its own\nUI.\n\n\nParameters:\n\n\n\n\ncontroller\n - An object created by the extension that implements the \nIMessageEditorController\n  interface. This parameter is optional and may be \nnull\n. If it is provided, then the message editor will query the controller when required to obtain details about the currently displayed message, including the \nIHttpService\n for the message, and the associated request or response message. If a controller is not provided, then the message editor will not support context menu actions, such as sending requests to other Burp tools.\n\n\neditable\n - Indicates whether the editor created should be editable, or used only for message viewing.\n\n\ncallback\n - A JavaScript callback function that will be called once the \nIMessageEditor\n instance is created. The instance of \nIMessageEditor\n will be passed to the callback function as the first parameter.\n\n\n\n\nExample:\n\n\nburpCallbacks.createMessageEditor(\n    controller, \n    true,\n    function(editor) {\n        alert('Created an editor!');\n    }\n);\n\n\n\n\n\n\ngetCommandLineArguments()\n\n\nThis method returns the command line arguments that were passed to Burp on startup.\n\n\nReturns:\n\nThe command line arguments that were passed to Burp on startup.\n\n\nExample:\n\n\nburpCallbacks.getCommandLineArguments();\n\n\n\n\n\n\nsaveExtensionSetting(String name, String value)\n\n\nThis method is used to save configuration settings for the extension in a persistent way that survives reloads of\nthe extension and of Burp Suite. Saved settings can be retrieved using the method \nloadExtensionSetting()\n.\n\n\nParameters:\n\n\n\n\nname\n - The name of the setting.\n\n\nvalue\n - The value of the setting. If this value is \nnull\n then any existing setting with the specified name will be removed.\n\n\n\n\nExample:\n\n\nburpCallbacks.saveExtensionSetting('foo', 'bar');\n\n\n\n\n\n\nloadExtensionSetting(String name)\n\n\nThis method is used to load configuration settings for the extension that were saved using the method \nsaveExtensionSetting()\n.\n\n\nParameters:\n\n\n\n\nname\n - The name of the setting.\n\n\n\n\nReturns:\n\nThe value of the setting, or \nnull\n if no value is set.\n\n\nExample:\n\n\nburpCallbacks.saveExtensionSetting('foo'); // returns 'bar'\n\n\n\n\n\n\ncreateTextEditor()\n\n\nThis method is used to create a new instance of Burp's plain text editor, for the extension to use in its own UI.\n\n\nReturns\n:\nAn instance of \nburp.ITextEditor\n.\n\n\nExample:\n\n\nburpCallbacks.createTextEditor();\n\n\n\n\n\n\nTODO: add rest of \nburpCallbacks\n API", 
            "title": "Methods"
        }, 
        {
            "location": "/API/callbacks-api/#setextensionnamestring-name", 
            "text": "Sets the name of the BurpKit extension since all BurpScript extensions are operating under the context of the BurpKit plugin.  Parameters:   name : the name you wish to set for this extension.   Example:  burpCallbacks.setExtensionName('foo');", 
            "title": "setExtensionName(String name)"
        }, 
        {
            "location": "/API/callbacks-api/#gethelpers", 
            "text": "Returns an instance of the  ExtensionHelpersBridge  object, which adheres to the API of the  IExtensionHelpers  interface with a few minor exceptions. See the  ExtensionHelpersBridge  page for more details on the API.  Returns: \nAn  ExtensionHelpersBridge  object.  Example:  var helpers = burpCallbacks.getHelpers();\nhelpers.urlDecode('%3cscript%3e'); // returns ' script '", 
            "title": "getHelpers()"
        }, 
        {
            "location": "/API/callbacks-api/#getstdout", 
            "text": "This method is used to obtain the current extension's standard output stream. Extensions should write all output\nto this stream, allowing the Burp user to configure how that output is handled from within the UI.  Returns: \nThe extension's standard output stream.  Example:  burpCallbacks.getStdout().write(\n  burpCallbacks.getHelpers().stringToBytes('Hello World!\\n')\n);", 
            "title": "getStdout()"
        }, 
        {
            "location": "/API/callbacks-api/#getstderr", 
            "text": "This method is used to obtain the current extension's standard error stream. Extensions should write all output\nto this stream, allowing the Burp user to configure how that output is handled from within the UI.  Returns: \nThe extension's standard error stream.  Example:  burpCallbacks.getStderr().write(\n  burpCallbacks.getHelpers().stringToBytes('Hello World!\\n')\n);", 
            "title": "getStderr()"
        }, 
        {
            "location": "/API/callbacks-api/#printoutputstring-message", 
            "text": "This method prints a line of output to the current extension's standard output stream.  Parameters:   message  - The message to print.   Example:  burpCallbacks.printOutput( hello\\n );", 
            "title": "printOutput(String message)"
        }, 
        {
            "location": "/API/callbacks-api/#printerrorstring-message", 
            "text": "This method prints a line of output to the current extension's standard error stream.  Parameters:   message  - The message to print.   Example:  burpCallbacks.printError( hello\\n );", 
            "title": "printError(String message)"
        }, 
        {
            "location": "/API/callbacks-api/#registerextensionstatelistenerobject-listener", 
            "text": "This method is used to register a listener which will be notified of changes to the extension's state.  Note:  Any\nextensions that start background threads or open system resources (such as files or database connections) should\nregister a listener and terminate threads / close resources when the extension is unloaded.  Parameters:   listener  - An object created by the extension that implements the  IExtensionStateListener  interface or a lambda function that has the same prototype as the  IExtensionStateListener.extensionUnloaded()  method.   Returns: \nThe Java instance of  burp.IExtensionStateListener  that was registered.  Example:  burpCallbacks.registerExtensionStateListener(function() { \n  alert('Extension Unloaded!');\n});  or:  burpCallbacks.registerExtensionStateListener({\n  'extensionUnloaded': function() {\n    alert('Extension Unloaded!');\n  }\n});", 
            "title": "registerExtensionStateListener(Object listener)"
        }, 
        {
            "location": "/API/callbacks-api/#getextensionstatelisteners", 
            "text": "This method is used to retrieve the extension state listeners that are registered by the extension.  Returns: \nA list of extension state listeners that are currently registered by this extension.  Example:  burpCallbacks.getExtensionStateListeners();", 
            "title": "getExtensionStateListeners()"
        }, 
        {
            "location": "/API/callbacks-api/#removeextensionstatelisteneriextensionstatelistener-listener", 
            "text": "This method is used to remove an extension state listener that has been registered by the extension.  Note:  you must\npass the object returned from  registerExtensionStateListener()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based extension state listener.   Parameters:   listener  - The extension state listener to be removed.   Example:  var listener = burpCallbacks.registerExtensionStateListener(function() { \n  alert('Extension Unloaded!');\n});\n\nburpCallbacks.removeExtensionStateListener(listener);", 
            "title": "removeExtensionStateListener(IExtensionStateListener listener)"
        }, 
        {
            "location": "/API/callbacks-api/#registerhttplistenerobject-listener", 
            "text": "This method is used to register a listener which will be notified of requests and responses made by any Burp tool.\nExtensions can perform custom analysis or modification of these messages by registering an HTTP listener.  Parameters:   listener  - An object created by the extension that implements the  IHttpListener  interface or a lambda function that has the same prototype as the  IHttpListener.processHttpMessage() .   Returns: \nThe instance of  burp.IHttpListener  that was registered.  Example:  burpCallbacks.registerHttpListener(function(toolFlag, isRequest, messageInfo) {\n  alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n});  or:  burpCallbacks.registerHttpListener({\n  'processHttpMessage': function(toolFlag, isRequest, messageInfo) {\n    alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n  }\n});", 
            "title": "registerHttpListener(Object listener)"
        }, 
        {
            "location": "/API/callbacks-api/#gethttplisteners", 
            "text": "This method is used to retrieve the HTTP listeners that are registered by the extension.  Returns: \nA list of HTTP listeners that are currently registered by this extension.  Example:  burpCallbacks.getHttpListeners();", 
            "title": "getHttpListeners()"
        }, 
        {
            "location": "/API/callbacks-api/#removehttplistenerihttplistener-listener", 
            "text": "This method is used to remove an HTTP listener that has been registered by the extension.  Note:  you must\npass the object returned from  registerHttpListener()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based HTTP listener.   Parameters:   listener  - The HTTP listener to be removed.   Example:  listener = burpCallbacks.registerHttpListener({\n  'processHttpMessage': function(toolFlag, isRequest, messageInfo) {\n    alert('Processing message from ' + burpCallbacks.getToolName(toolFlag));\n  }\n});\nburpCallbacks.removeHttpListener(listener);", 
            "title": "removeHttpListener(IHttpListener listener)"
        }, 
        {
            "location": "/API/callbacks-api/#registerproxylistenerobject-listener", 
            "text": "This method is used to register a listener which will be notified of requests and responses being processed by\nthe Proxy tool. Extensions can perform custom analysis or modification of these messages, and control in-UI\nmessage interception, by registering a proxy listener.  Parameters:   listener  - An object created by the extension that implements the  IProxyListener  interface or a lambda function that has the same prototype as the  IHttpListener.processProxyMessage() .   Returns: \nThe instance of  burp.IProxyListener  that was registered.  Example:  burpCallbacks.registerProxyListener(function(isRequest, messageInfo) {\n  alert('Is request? ' + isRequest);\n});  or:  burpCallbacks.registerProxyListener({\n  'processProxyMessage': function(isRequest, messageInfo) {\n    alert('Is request? ' + isRequest);\n  }\n});", 
            "title": "registerProxyListener(Object listener)"
        }, 
        {
            "location": "/API/callbacks-api/#getproxylisteners", 
            "text": "This method is used to retrieve the Proxy listeners that are registered by the extension.  Returns: \nA list of Proxy listeners that are currently registered by this extension.  Example:  burpCallbacks.getProxyListeners();", 
            "title": "getProxyListeners()"
        }, 
        {
            "location": "/API/callbacks-api/#removeproxylisteneriproxylistener-listener", 
            "text": "This method is used to remove a Proxy listener that has been registered by the extension.  Note:  you must\npass the object returned from  registerProxyListener()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based proxy listener.   Parameters:   listener  - The HTTP listener to be removed.   Example:  listener = burpCallbacks.registerProxyListener(function(isRequest, messageInfo) {\n  alert('Is request? ' + isRequest);\n});\nburpCallbacks.removeProxyListener(listener);", 
            "title": "removeProxyListener(IProxyListener listener)"
        }, 
        {
            "location": "/API/callbacks-api/#registerscannerlistenerobject-listener", 
            "text": "This method is used to register a listener which will be notified of new issues that are reported by the Scanner\ntool. Extensions can perform custom analysis or logging of Scanner issues by registering a Scanner listener.  Parameters:   listener  - An object created by the extension that implements the  IScannerListener  interface or a lambda function that has the same prototype as the  IScannerListener.newScanIssue() .   Returns: \nThe instance of  burp.IScannerListener  that was registered.  Example:  burpCallbacks.registerScannerListener(function(scanIssue) {\n  alert('Got issue: ' + scanIssue.getIssueName());\n});  or:  burpCallbacks.registerScannerListener({\n  'processProxyMessage': function(isRequest, messageInfo) {\n    alert('Got issue: ' + scanIssue.getIssueName());\n  }\n});", 
            "title": "registerScannerListener(Object listener)"
        }, 
        {
            "location": "/API/callbacks-api/#getscannerlisteners", 
            "text": "This method is used to retrieve the Scanner listeners that are registered by the extension.  Returns: \nA list of Scanner listeners that are currently registered by this extension.  Example:  burpCallbacks.getScannerListeners();", 
            "title": "getScannerListeners()"
        }, 
        {
            "location": "/API/callbacks-api/#removescannerlisteneriscannerlistener-listener", 
            "text": "This method is used to remove a Scanner listener that has been registered by the extension.  Note:  you must\npass the object returned from  registerScannerListener()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based scanner listener.   Parameters:   listener  - The Scanner listener to be removed.   Example:  listener = burpCallbacks.registerScannerListener(function(scanIssue) {\n alert('Got issue: ' + scanIssue.getIssueName());\n});\nburpCallbacks.removeScannerListener(listener);", 
            "title": "removeScannerListener(IScannerListener listener)"
        }, 
        {
            "location": "/API/callbacks-api/#registerscopechangelistenerobject-listener", 
            "text": "This method is used to register a listener which will be notified of changes to Burp's suite-wide target scope.  Parameters:   listener  - An object created by the extension that implements the  IScopeChangeListener  interface or a lambda function that has the same prototype as the  IScannerListener.scopeChanged() .   Returns: \nThe instance of  burp.IScannerListener  that was registered.  Example:  burpCallbacks.registerScopeChangeListener(function() {\n  alert('Scope changed!');\n});  or:  burpCallbacks.registerScopeChangeListener({\n  'scopeChanged': function() {\n     alert('Scope changed!');\n  }\n});", 
            "title": "registerScopeChangeListener(Object listener)"
        }, 
        {
            "location": "/API/callbacks-api/#getscopechangelisteners", 
            "text": "This method is used to retrieve the scope change listeners that are registered by the extension.  Returns: \nA list of scope change listeners that are currently registered by this extension.  Example:  burpCallbacks.getScopeChangeListeners();", 
            "title": "getScopeChangeListeners()"
        }, 
        {
            "location": "/API/callbacks-api/#removescopechangelisteneriscannerlistener-listener", 
            "text": "This method is used to remove a scope change listener that has been registered by the extension.  Note:  you must\npass the object returned from  registerScopeChangeListener()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based scope change listener.   Parameters:   listener  - The listener to be removed.   Example:  listener = burpCallbacks.registerScopeChangeListener(function() {\n alert('Scope changed!');\n});\nburpCallbacks.removeScopeChangeListener(listener);", 
            "title": "removeScopeChangeListener(IScannerListener listener)"
        }, 
        {
            "location": "/API/callbacks-api/#registercontextmenufactoryobject-factory", 
            "text": "This method is used to register a factory for custom context menu items. When the user invokes a context menu\nanywhere within Burp, the factory will be passed details of the invocation event, and asked to provide any\ncustom context menu items that should be shown.  Parameters:   factory  - An object created by the extension that implements the  IContextMenuFactory  interface or a lambda function that has the same prototype as the  IContextMenuFactory.createMenuItems() .   Returns: \nThe instance of  burp.IContextMenuFactory  that was registered.  Example:  burpCallbacks.registerContextMenuFactory(function(invocation) {\n  alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n});  or:  burpCallbacks.registerContextMenuFactory({\n  'createMenuItems': function(invocation) {\n     alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n  }\n});", 
            "title": "registerContextMenuFactory(Object factory)"
        }, 
        {
            "location": "/API/callbacks-api/#getcontextmenufactories", 
            "text": "This method is used to retrieve the context menu factories that are registered by the extension.  Returns: \nA list of context menu factories that are currently registered by this extension.  Example:  burpCallbacks.getContextMenuFactories();", 
            "title": "getContextMenuFactories()"
        }, 
        {
            "location": "/API/callbacks-api/#removecontextmenufactoryicontextmenufactory-factory", 
            "text": "This method is used to remove a context menu factory that has been registered by the extension.  Note:  you must\npass the object returned from  registerContextMenuFactory()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based context menu factory.   Parameters:   factory  - The context menu factory to be removed.   Example:  factory = burpCallbacks.registerContextMenuFactory(function(invocation) {\n  alert('Context menu was invoked from ' + burpCallbacks.getToolName(invocation.getToolFlag()));\n});\nburpCallbacks.removeContextMenuFactory(factory);", 
            "title": "removeContextMenuFactory(IContextMenuFactory factory)"
        }, 
        {
            "location": "/API/callbacks-api/#registermessageeditortabfactoryobject-factory", 
            "text": "This method is used to register a factory for custom message editor tabs. For each message editor that already\nexists, or is subsequently created, within Burp, the factory will be asked to provide a new instance of an burp.IMessageEditorTab  object, which can provide custom rendering or editing of HTTP messages.  Note:  there is\na small difference between the interface provided by BurpSuite for  IMessageEditorTabFactory  and the interface\nof the JavaScript-based  IMessageEditorTabFactory . An extra  textEditor  parameter is passed to the  createNewInstance() \nwhich contains an instance of  ITextEditor . This is done to avoid deadlocks due to interweaving call sequences between\nthe JavaFX and Swing event loops.   Parameters:   factory  - An object created by the extension that implements a variant of the  IMessageEditorTabFactory  interface or a lambda function that has a variant of the prototype defined by the  IMessageEditorTabFactory.createNewInstance()  with an extra  textEditor  parameter passed to  createNewInstance() . See examples for nuances.   Returns: \nThe instance of  burp.IMessageEditorTabFactory  that was registered.  Example:  burpCallbacks.registerMessageEditorTabFactory(function(controller, editable, textEditor) {\n  alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n});  or:  burpCallbacks.registerMessageEditorTabFactory({\n  'createNewInstance': function(controller, editable, textEditor) {\n     alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n  }\n});", 
            "title": "registerMessageEditorTabFactory(Object factory)"
        }, 
        {
            "location": "/API/callbacks-api/#getmessageeditortabfactories", 
            "text": "This method is used to retrieve the message editor tab factories that are registered by the extension.  Returns: \nA list of message editor tab factories that are currently registered by this extension.  Example:  burpCallbacks.getMessageEditorTabFactories();", 
            "title": "getMessageEditorTabFactories()"
        }, 
        {
            "location": "/API/callbacks-api/#removemessageeditortabfactoryimessageeditortabfactory-factory", 
            "text": "This method is used to remove a message editor tab factory that has been registered by the extension.  Note:  you must\npass the object returned from  registerContextMenuFactory()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based message editor tab factory.   Parameters:   factory  - The message editor tab factory to be removed.   Example:  factory = burpCallbacks.registerMessageEditorTabFactory(function(controller, editable, textEditor) {\n  alert('Created controller=' + controller + ', editable=' + editable + ', textEditor=' + textEditor);\n});\nburpCallbacks.removeMessageEditorTabFactory(factory);", 
            "title": "removeMessageEditorTabFactory(IMessageEditorTabFactory factory)"
        }, 
        {
            "location": "/API/callbacks-api/#registerscannerinsertionpointproviderobject-provider", 
            "text": "This method is used to register a provider of Scanner insertion points. For each base request that is actively\nscanned, Burp will ask the provider to provide any custom scanner insertion points that are appropriate for the\nrequest.  Parameters:   provider  - An object created by the extension that implements the  IScannerInsertionPointProvider  interface or a lambda function that has the same prototype as the  IScannerInsertionPointProvider.getInsertionPoints() .   Returns: \nThe instance of  burp.IScannerInsertionPointProvider  that was registered.  Example:  burpCallbacks.registerScannerInsertionPointProvider(function(baseRequestResponse) {\n  baseRequestResponse.setComment('BurpKit rules!');\n});  or:  burpCallbacks.registerScannerInsertionPointProvider({\n  'getInsertionPoints': function(baseRequestResponse) {\n     baseRequestResponse.setComment('BurpKit rules!');\n  }\n});", 
            "title": "registerScannerInsertionPointProvider(Object provider)"
        }, 
        {
            "location": "/API/callbacks-api/#getscannerinsertionpointproviders", 
            "text": "This method is used to retrieve the Scanner insertion point providers that are registered by the extension.  Returns: \nA list of Scanner insertion point providers that are currently registered by this extension.  Example:  burpCallbacks.getContextMenuFactories();", 
            "title": "getScannerInsertionPointProviders()"
        }, 
        {
            "location": "/API/callbacks-api/#removescannerinsertionpointprovideriscannerinsertionpointprovider-provider", 
            "text": "Note:  you must\npass the object returned from  registerScannerInsertionPointProvider()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based scope change listener.   Parameters:   provider  - The scanner insertion point provider to be removed.   Example:  provider = burpCallbacks.registerScannerInsertionPointProvider(function(baseRequestResponse) {\n  baseRequestResponse.setComment('BurpKit rules!');\n});\nburpCallbacks.removeScannerInsertionPointProvider(factory);", 
            "title": "removeScannerInsertionPointProvider(IScannerInsertionPointProvider provider)"
        }, 
        {
            "location": "/API/callbacks-api/#registerscannercheckobject-check", 
            "text": "This method is used to register a custom Scanner check. When performing scanning, Burp will ask the check to\nperform active or passive scanning on the base request, and report any Scanner issues that are identified.  Parameters:   check  - An object created by the extension that implements the  IScannerCheck  interface.   Returns: \nThe instance of  burp.IScannerCheck  that was registered.  Example:  burpCallbacks.registerScannerCheck({\n  'doPassiveScan': function(baseRequestResponse, newIssue) {\n    // do passive scan logic\n  },\n  'doActiveScan': function(baseRequestResponse, insertionPoint) {\n    // do active scan logic\n  },\n  'consolidateDuplicateIssues(existingIssue, newIssue) {\n    // do comparison\n    return 0;\n  }\n});", 
            "title": "registerScannerCheck(Object check)"
        }, 
        {
            "location": "/API/callbacks-api/#getscannerchecks", 
            "text": "This method is used to retrieve the Scanner checks that are registered by the extension.  Returns: \nA list of Scanner checks that are currently registered by this extension.  Example:  burpCallbacks.getScannerChecks();", 
            "title": "getScannerChecks()"
        }, 
        {
            "location": "/API/callbacks-api/#removescannercheckiscannercheck-check", 
            "text": "This method is used to remove a Scanner check that has been registered by the extension.  Note:  you must\npass the object returned from  registerScannerCheck()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based scanner check.   Parameters:   check  - The scanner check to be removed.   Example:  check = burpCallbacks.registerScannerCheck({\n  'doPassiveScan': function(baseRequestResponse, newIssue) {\n    // do passive scan logic\n  },\n  'doActiveScan': function(baseRequestResponse, insertionPoint) {\n    // do active scan logic\n  },\n  'consolidateDuplicateIssues(existingIssue, newIssue) {\n    // do comparison\n    return 0;\n  }\n});\nburpCallbacks.removeScannerCheck(check);", 
            "title": "removeScannerCheck(IScannerCheck check)"
        }, 
        {
            "location": "/API/callbacks-api/#registerintruderpayloadgeneratorfactoryobject-factory", 
            "text": "This method is used to register a factory for Intruder payloads. Each registered factory will be available within\nthe Intruder UI for the user to select as the payload source for an attack. When this is selected, the factory\nwill be asked to provide a new instance of an  burp.IIntruderPayloadGenerator  object, which will\nbe used to generate payloads for the attack.  Parameters:   factory  - An object created by the extension that implements the  IIntruderPayloadGeneratorFactory  interface.   Returns: \nThe instance of  burp.IIntruderPayloadGeneratorFactory  that was registered.  Example:  burpCallbacks.registerIntruderPayloadGeneratorFactory({\n    'createNewInstance': function(attack) {\n        return new MyIntruderPayloadGenerator(attack); // your IIntruderPayloadGenerator object\n    },\n    'getGeneratorName': function() {\n        return 'foo';\n    }\n});", 
            "title": "registerIntruderPayloadGeneratorFactory(Object factory)"
        }, 
        {
            "location": "/API/callbacks-api/#getintruderpayloadgeneratorfactories", 
            "text": "This method is used to retrieve the Intruder payload generator factories that are registered by the extension.  Returns: \nA list of Intruder payload generator factories that are currently registered by this extension.  Example:  burpCallbacks.getIntruderPayloadGeneratorFactories();", 
            "title": "getIntruderPayloadGeneratorFactories()"
        }, 
        {
            "location": "/API/callbacks-api/#removeintruderpayloadgeneratorfactoryiintruderpayloadgeneratorfactory-factory", 
            "text": "This method is used to remove an Intruder payload generator factory that has been registered by the extension.  Note:  you must\npass the object returned from  registerIntruderPayloadGeneratorFactory()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based intruder payload generator factory.   Parameters:   factory  - The intruder payload generator factory to be removed.   Example:  burpCallbacks.registerIntruderPayloadGeneratorFactory({\n    'createNewInstance': function(attack) {\n        return new MyIntruderPayloadGenerator(attack);\n    },\n    'getGeneratorName': function() {\n        return 'foo';\n    }\n});\nburpCallbacks.removeContextMenuFactory(factory);", 
            "title": "removeIntruderPayloadGeneratorFactory(IIntruderPayloadGeneratorFactory factory)"
        }, 
        {
            "location": "/API/callbacks-api/#registerintruderpayloadprocessorobject-factory", 
            "text": "This method is used to register a custom Intruder payload processor. Each registered processor will be available\nwithin the Intruder UI for the user to select as the action for a payload processing rule.  Parameters:   processor  - An object created by the extension that implements the  IIntruderPayloadProcessor  interface.   Returns: \nThe instance of  burp.IIntruderPayloadProcessor  that was registered.  Example:  burpCallbacks.registerIntruderPayloadProcessor({\n  'getProcessorName': function() {\n     return 'BurpKit Processor';\n  },\n  'processPayload': function(currentPayload, originalPayload, baseValue) {\n     // change something\n     return modifiedBytes;\n  }\n});", 
            "title": "registerIntruderPayloadProcessor(Object factory)"
        }, 
        {
            "location": "/API/callbacks-api/#getintruderpayloadprocessors", 
            "text": "This method is used to retrieve the Intruder payload processors that are registered by the extension.  Returns: \nA list of Intruder payload processors that are currently registered by this extension.  Example:  burpCallbacks.getIntruderPayloadProcessors();", 
            "title": "getIntruderPayloadProcessors()"
        }, 
        {
            "location": "/API/callbacks-api/#removeintruderpayloadprocessoricontextmenufactory-factory", 
            "text": "This method is used to remove an Intruder payload processor that has been registered by the extension.  Note:  you must\npass the object returned from  registerIntruderPayloadProcessor()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based intruder payload processor.   Parameters:   processor  - The intruder payload processor to be removed.   Example:  processor = burpCallbacks.registerIntruderPayloadProcessor({\n  'getProcessorName': function() {\n     return 'BurpKit Processor';\n  },\n  'processPayload': function(currentPayload, originalPayload, baseValue) {\n     // change something\n     return modifiedBytes;\n  }\n});\nburpCallbacks.removeIntruderPayloadProcessor(processor);", 
            "title": "removeIntruderPayloadProcessor(IContextMenuFactory factory)"
        }, 
        {
            "location": "/API/callbacks-api/#registersessionhandlingactionobject-action", 
            "text": "This method is used to register a custom session handling action. Each registered action will be available within\nthe session handling rule UI for the user to select as a rule action. Users can choose to invoke an action\ndirectly in its own right, or following execution of a macro.  Parameters:   action  - An object created by the extension that implements the  ISessionHandlingAction  interface.   Returns: \nThe instance of  burp.ISessionHandlingAction  that was registered.  Example:  burpCallbacks.registerSessionHandlingAction({\n  'getActionName': function() {\n     return 'BurpKit Action';\n  },\n  'performAction': function(currentRequest, macroItems) {\n     // do something here\n  }\n});", 
            "title": "registerSessionHandlingAction(Object action)"
        }, 
        {
            "location": "/API/callbacks-api/#getsessionhandlingactions", 
            "text": "This method is used to retrieve the session handling actions that are registered by the extension.  Returns: \nThis method is used to retrieve the session handling actions that are registered by the extension.  Example:  burpCallbacks.getSessionHandlingActions();", 
            "title": "getSessionHandlingActions()"
        }, 
        {
            "location": "/API/callbacks-api/#removesessionhandlingactionisessionhandlingaction-action", 
            "text": "This method is used to remove a session handling action that has been registered by the extension.  Note:  you must\npass the object returned from  registerSessionHandlingAction()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based session handling action.   Parameters:   action  - The extension session handling action to be removed.   Example:  action = burpCallbacks.registerSessionHandlingAction({\n  'getActionName': function() {\n     return 'BurpKit Action';\n  },\n  'performAction': function(currentRequest, macroItems) {\n     // do something here\n  }\n});\nburpCallbacks.removeSessionHandlingAction(action);", 
            "title": "removeSessionHandlingAction(ISessionHandlingAction action)"
        }, 
        {
            "location": "/API/callbacks-api/#unloadextension", 
            "text": "This method is used to unload the extension from Burp Suite. If called,  BurpKit  will be unloaded.  Example:  burpCallbacks.unloadExtension();", 
            "title": "unloadExtension()"
        }, 
        {
            "location": "/API/callbacks-api/#addsuitetabobject-tab", 
            "text": "This method is used to add a custom tab to the main Burp Suite window.   Parameters:   tab  - An object created by the extension that implements the  ITab  interface.   Returns: \nThe instance of  burp.ITab  that was created.  Example:  burpCallbacks.addTab({\n    'getTabCaption': function() {\n        return 'foo';\n    },\n    'getUiComponent': function() {\n        return new MyUiComponent();\n    }\n});", 
            "title": "addSuiteTab(Object tab)"
        }, 
        {
            "location": "/API/callbacks-api/#removesuitetabitab-tab", 
            "text": "This method is used to remove a previously-added tab from the main Burp Suite window.  Note:  you must\npass the object returned from  addSuiteTab()  instead of the JavaScript object if you are trying to\nremove a JavaScript-based tab.   Parameters:   tab  - An object created by the extension that implements the  ITab  interface.   Returns: \nThe instance of  burp.ITab  that was created.  Example:  burpCallbacks.addTab({\n    'getTabCaption': function() {\n        return 'foo';\n    },\n    'getUiComponent': function() {\n        return new MyUiComponent();\n    }\n});", 
            "title": "removeSuiteTab(ITab tab)"
        }, 
        {
            "location": "/API/callbacks-api/#customizeuicomponentcomponent-component", 
            "text": "This method is used to customize UI components in line with Burp's UI style, including font size, colors, table\nline spacing, etc. The action is performed recursively on any child components of the passed-in component.  Parameters:   component  - The UI component to be customized.   Example:  burpCallbacks.customizeUiComponent(component);", 
            "title": "customizeUiComponent(Component component)"
        }, 
        {
            "location": "/API/callbacks-api/#createmessageeditorobject-controller-boolean-editable-jsobject-callback", 
            "text": "This method is used to create a new instance of Burp's HTTP message editor, for the extension to use in its own\nUI.  Parameters:   controller  - An object created by the extension that implements the  IMessageEditorController   interface. This parameter is optional and may be  null . If it is provided, then the message editor will query the controller when required to obtain details about the currently displayed message, including the  IHttpService  for the message, and the associated request or response message. If a controller is not provided, then the message editor will not support context menu actions, such as sending requests to other Burp tools.  editable  - Indicates whether the editor created should be editable, or used only for message viewing.  callback  - A JavaScript callback function that will be called once the  IMessageEditor  instance is created. The instance of  IMessageEditor  will be passed to the callback function as the first parameter.   Example:  burpCallbacks.createMessageEditor(\n    controller, \n    true,\n    function(editor) {\n        alert('Created an editor!');\n    }\n);", 
            "title": "createMessageEditor(Object controller, boolean editable, JSObject callback)"
        }, 
        {
            "location": "/API/callbacks-api/#getcommandlinearguments", 
            "text": "This method returns the command line arguments that were passed to Burp on startup.  Returns: \nThe command line arguments that were passed to Burp on startup.  Example:  burpCallbacks.getCommandLineArguments();", 
            "title": "getCommandLineArguments()"
        }, 
        {
            "location": "/API/callbacks-api/#saveextensionsettingstring-name-string-value", 
            "text": "This method is used to save configuration settings for the extension in a persistent way that survives reloads of\nthe extension and of Burp Suite. Saved settings can be retrieved using the method  loadExtensionSetting() .  Parameters:   name  - The name of the setting.  value  - The value of the setting. If this value is  null  then any existing setting with the specified name will be removed.   Example:  burpCallbacks.saveExtensionSetting('foo', 'bar');", 
            "title": "saveExtensionSetting(String name, String value)"
        }, 
        {
            "location": "/API/callbacks-api/#loadextensionsettingstring-name", 
            "text": "This method is used to load configuration settings for the extension that were saved using the method  saveExtensionSetting() .  Parameters:   name  - The name of the setting.   Returns: \nThe value of the setting, or  null  if no value is set.  Example:  burpCallbacks.saveExtensionSetting('foo'); // returns 'bar'", 
            "title": "loadExtensionSetting(String name)"
        }, 
        {
            "location": "/API/callbacks-api/#createtexteditor", 
            "text": "This method is used to create a new instance of Burp's plain text editor, for the extension to use in its own UI.  Returns :\nAn instance of  burp.ITextEditor .  Example:  burpCallbacks.createTextEditor();", 
            "title": "createTextEditor()"
        }, 
        {
            "location": "/API/callbacks-api/#todo-add-rest-of-burpcallbacks-api", 
            "text": "", 
            "title": "TODO: add rest of burpCallbacks API"
        }, 
        {
            "location": "/API/callbacks-constants/", 
            "text": "All of the various BurpSuite constants can be found as fields or properties within the \nburpCallbacks\n object and can be accessed like so:\n\n\nburpCallbacks.TOOL_COMPARER\nburpCallbacks.PARAM_BODY\n// etc.\n\n\n\n\n\n\nTool Flags\n\n\n\n\nTOOL_COMPARER\n - Flag used to identify the Burp Comparer tool.\n\n\nTOOL_DECODER\n - Flag used to identify the Burp Decoder tool.\n\n\nTOOL_EXTENDER\n - Flag used to identify the Burp Extender tool.\n\n\nTOOL_INTRUDER\n - Flag used to identify the Burp Intruder tool.\n\n\nTOOL_PROXY\n - Flag used to identify the Burp Proxy tool.\n\n\nTOOL_REPEATER\n - Flag used to identify the Burp Repeater tool.\n\n\nTOOL_SCANNER\n - Flag used to identify the Burp Scanner tool.\n\n\nTOOL_SEQUENCER\n - Flag used to identify the Burp Sequencer tool.\n\n\nTOOL_SPIDER\n - Flag used to identify the Burp Spider tool.\n\n\nTOOL_SUITE\n - Flag used to identify Burp Suite as a whole.\n\n\nTOOL_TARGET\n - Flag used to identify the Burp Target tool.\n\n\n\n\n\n\nParameter Types\n\n\n\n\nPARAM_BODY\n - Used to indicate a parameter within the message body.\n\n\nPARAM_COOKIE\n - Used to indicate an HTTP cookie.\n\n\nPARAM_JSON\n - Used to indicate an item of data within a JSON structure.\n\n\nPARAM_MULTIPART_ATTR\n - Used to indicate the value of a parameter attribute within a multi-part message body (such as the name of an uploaded file).\n\n\nPARAM_URL\n - Used to indicate a parameter within the URL query string.\n\n\nPARAM_XML\n - Used to indicate an item of data within an XML structure.\n\n\nPARAM_XML_ATTR\n - Used to indicate the value of a tag attribute within an XML structure.\n\n\n\n\n\n\nContext Menu Invocation Types\n\n\n\n\nCONTEXT_INTRUDER_ATTACK_RESULTS\n - Used to indicate that the context menu is being invoked in an Intruder attack results.\n\n\nCONTEXT_INTRUDER_PAYLOAD_POSITIONS\n - Used to indicate that the context menu is being invoked in the Intruder payload positions editor.\n\n\nCONTEXT_MESSAGE_EDITOR_REQUEST\n - Used to indicate that the context menu is being invoked in a request editor.\n\n\nCONTEXT_MESSAGE_EDITOR_RESPONSE\n - Used to indicate that the context menu is being invoked in a response editor.\n\n\nCONTEXT_MESSAGE_VIEWER_REQUEST\n - Used to indicate that the context menu is being invoked in a non-editable request viewer.\n\n\nCONTEXT_MESSAGE_VIEWER_RESPONSE\n - Used to indicate that the context menu is being invoked in a non-editable response viewer.\n\n\nCONTEXT_PROXY_HISTORY\n - Used to indicate that the context menu is being invoked in the Proxy history.\n\n\nCONTEXT_SCANNER_RESULTS\n - Used to indicate that the context menu is being invoked in the Scanner results.\n\n\nCONTEXT_SEARCH_RESULTS\n - Used to indicate that the context menu is being invoked in a search results window.\n\n\nCONTEXT_TARGET_SITE_MAP_TABLE\n - Used to indicate that the context menu is being invoked in the Target site map table.\n\n\nCONTEXT_TARGET_SITE_MAP_TREE\n - Used to indicate that the context menu is being invoked in the Target site map tree.\n\n\n\n\n\n\nAction Types\n\n\n\n\nACTION_DO_INTERCEPT\n - This action causes Burp Proxy to present the message to the user for manual review or modification.\n\n\nACTION_DO_INTERCEPT_AND_REHOOK\n - This action causes Burp Proxy to present the message to the user for manual review or modification, and then make a second call to processProxyMessage.\n\n\nACTION_DONT_INTERCEPT\n - This action causes Burp Proxy to forward the message to the remote server or client, without presenting it to the user.\n\n\nACTION_DONT_INTERCEPT_AND_REHOOK\n - This action causes Burp Proxy to skip user interception, and then make a second call to processProxyMessage.\n\n\nACTION_DROP\n - This action causes Burp Proxy to drop the message.\n\n\nACTION_FOLLOW_RULES\n - This action causes Burp Proxy to follow the current interception rules to determine the appropriate action to take for the message.\n\n\nACTION_FOLLOW_RULES_AND_REHOOK\n - This action causes Burp Proxy to follow the current interception rules to determine the appropriate action to take for the message, and then make a second call to processProxyMessage.\n\n\n\n\n\n\nScanner Insertion Point Types\n\n\n\n\nINS_EXTENSION_PROVIDED\n - Used to indicate where the insertion point is provided by an extension-registered IScannerInsertionPointProvider.\n\n\nINS_HEADER\n - Used to indicate where the payload is inserted into the value of an HTTP request header.\n\n\nINS_PARAM_AMF\n - Used to indicate where the payload is inserted into the value of an AMF parameter.\n\n\nINS_PARAM_BODY\n - Used to indicate where the payload is inserted into the value of a body parameter.\n\n\nINS_PARAM_COOKIE\n - Used to indicate where the payload is inserted into the value of an HTTP cookie.\n\n\nINS_PARAM_JSON\n - Used to indicate where the payload is inserted into the value of an item of data within a JSON structure.\n\n\nINS_PARAM_MULTIPART_ATTR\n - Used to indicate where the payload is inserted into the value of a parameter attribute within a multi-part message body (such as the name of an uploaded file).\n\n\nINS_PARAM_NAME_BODY\n - Used to indicate where the payload is inserted into the name of an added body parameter.\n\n\nINS_PARAM_NAME_URL\n - Used to indicate where the payload is inserted into the name of an added URL parameter.\n\n\nINS_PARAM_URL\n - Used to indicate where the payload is inserted into the value of a URL parameter.\n\n\nINS_PARAM_XML\n - Used to indicate where the payload is inserted into the value of an item of data within an XML data structure.\n\n\nINS_PARAM_XML_ATTR\n - Used to indicate where the payload is inserted into the value of a tag attribute within an XML structure.\n\n\nINS_UNKNOWN\n - Used to indicate where the payload is inserted at an unknown location within the request.\n\n\nINS_URL_REST\n - Used to indicate where the payload is inserted into a REST parameter within the URL file path.\n\n\nINS_USER_PROVIDED\n - Used to indicate where the payload is inserted at a location manually configured by the user.", 
            "title": "Constants"
        }, 
        {
            "location": "/API/callbacks-constants/#tool-flags", 
            "text": "TOOL_COMPARER  - Flag used to identify the Burp Comparer tool.  TOOL_DECODER  - Flag used to identify the Burp Decoder tool.  TOOL_EXTENDER  - Flag used to identify the Burp Extender tool.  TOOL_INTRUDER  - Flag used to identify the Burp Intruder tool.  TOOL_PROXY  - Flag used to identify the Burp Proxy tool.  TOOL_REPEATER  - Flag used to identify the Burp Repeater tool.  TOOL_SCANNER  - Flag used to identify the Burp Scanner tool.  TOOL_SEQUENCER  - Flag used to identify the Burp Sequencer tool.  TOOL_SPIDER  - Flag used to identify the Burp Spider tool.  TOOL_SUITE  - Flag used to identify Burp Suite as a whole.  TOOL_TARGET  - Flag used to identify the Burp Target tool.", 
            "title": "Tool Flags"
        }, 
        {
            "location": "/API/callbacks-constants/#parameter-types", 
            "text": "PARAM_BODY  - Used to indicate a parameter within the message body.  PARAM_COOKIE  - Used to indicate an HTTP cookie.  PARAM_JSON  - Used to indicate an item of data within a JSON structure.  PARAM_MULTIPART_ATTR  - Used to indicate the value of a parameter attribute within a multi-part message body (such as the name of an uploaded file).  PARAM_URL  - Used to indicate a parameter within the URL query string.  PARAM_XML  - Used to indicate an item of data within an XML structure.  PARAM_XML_ATTR  - Used to indicate the value of a tag attribute within an XML structure.", 
            "title": "Parameter Types"
        }, 
        {
            "location": "/API/callbacks-constants/#context-menu-invocation-types", 
            "text": "CONTEXT_INTRUDER_ATTACK_RESULTS  - Used to indicate that the context menu is being invoked in an Intruder attack results.  CONTEXT_INTRUDER_PAYLOAD_POSITIONS  - Used to indicate that the context menu is being invoked in the Intruder payload positions editor.  CONTEXT_MESSAGE_EDITOR_REQUEST  - Used to indicate that the context menu is being invoked in a request editor.  CONTEXT_MESSAGE_EDITOR_RESPONSE  - Used to indicate that the context menu is being invoked in a response editor.  CONTEXT_MESSAGE_VIEWER_REQUEST  - Used to indicate that the context menu is being invoked in a non-editable request viewer.  CONTEXT_MESSAGE_VIEWER_RESPONSE  - Used to indicate that the context menu is being invoked in a non-editable response viewer.  CONTEXT_PROXY_HISTORY  - Used to indicate that the context menu is being invoked in the Proxy history.  CONTEXT_SCANNER_RESULTS  - Used to indicate that the context menu is being invoked in the Scanner results.  CONTEXT_SEARCH_RESULTS  - Used to indicate that the context menu is being invoked in a search results window.  CONTEXT_TARGET_SITE_MAP_TABLE  - Used to indicate that the context menu is being invoked in the Target site map table.  CONTEXT_TARGET_SITE_MAP_TREE  - Used to indicate that the context menu is being invoked in the Target site map tree.", 
            "title": "Context Menu Invocation Types"
        }, 
        {
            "location": "/API/callbacks-constants/#action-types", 
            "text": "ACTION_DO_INTERCEPT  - This action causes Burp Proxy to present the message to the user for manual review or modification.  ACTION_DO_INTERCEPT_AND_REHOOK  - This action causes Burp Proxy to present the message to the user for manual review or modification, and then make a second call to processProxyMessage.  ACTION_DONT_INTERCEPT  - This action causes Burp Proxy to forward the message to the remote server or client, without presenting it to the user.  ACTION_DONT_INTERCEPT_AND_REHOOK  - This action causes Burp Proxy to skip user interception, and then make a second call to processProxyMessage.  ACTION_DROP  - This action causes Burp Proxy to drop the message.  ACTION_FOLLOW_RULES  - This action causes Burp Proxy to follow the current interception rules to determine the appropriate action to take for the message.  ACTION_FOLLOW_RULES_AND_REHOOK  - This action causes Burp Proxy to follow the current interception rules to determine the appropriate action to take for the message, and then make a second call to processProxyMessage.", 
            "title": "Action Types"
        }, 
        {
            "location": "/API/callbacks-constants/#scanner-insertion-point-types", 
            "text": "INS_EXTENSION_PROVIDED  - Used to indicate where the insertion point is provided by an extension-registered IScannerInsertionPointProvider.  INS_HEADER  - Used to indicate where the payload is inserted into the value of an HTTP request header.  INS_PARAM_AMF  - Used to indicate where the payload is inserted into the value of an AMF parameter.  INS_PARAM_BODY  - Used to indicate where the payload is inserted into the value of a body parameter.  INS_PARAM_COOKIE  - Used to indicate where the payload is inserted into the value of an HTTP cookie.  INS_PARAM_JSON  - Used to indicate where the payload is inserted into the value of an item of data within a JSON structure.  INS_PARAM_MULTIPART_ATTR  - Used to indicate where the payload is inserted into the value of a parameter attribute within a multi-part message body (such as the name of an uploaded file).  INS_PARAM_NAME_BODY  - Used to indicate where the payload is inserted into the name of an added body parameter.  INS_PARAM_NAME_URL  - Used to indicate where the payload is inserted into the name of an added URL parameter.  INS_PARAM_URL  - Used to indicate where the payload is inserted into the value of a URL parameter.  INS_PARAM_XML  - Used to indicate where the payload is inserted into the value of an item of data within an XML data structure.  INS_PARAM_XML_ATTR  - Used to indicate where the payload is inserted into the value of a tag attribute within an XML structure.  INS_UNKNOWN  - Used to indicate where the payload is inserted at an unknown location within the request.  INS_URL_REST  - Used to indicate where the payload is inserted into a REST parameter within the URL file path.  INS_USER_PROVIDED  - Used to indicate where the payload is inserted at a location manually configured by the user.", 
            "title": "Scanner Insertion Point Types"
        }, 
        {
            "location": "/API/helpers-overview/", 
            "text": "The \nExtensionHelpersBridge\n is essentially an instance of the BurpSuite \nIExtensionHelpers\n object with a few minor exceptions to work-around the limitations within the JavaScript scripting language with regards to method overloading.  The helper object can be retrieved using the \nburpCallbacks.getHelpers()\n method. Although \nExtensionHelpersBridge\n objects are only accessible from within the JavaScripting language, you'll notice that the parameters for some of these methods are strongly typed. This is done to support interaction between the JVM, specifically BurpSuite, and the JavaScript engine.\n\n\nThe following example demonstrates how one can use the \nExtensionHelpersBridge\n object in JavaScript in very much the same way one uses the \nIExtensionHelpers\n object when writing Java plugins for BurpSuite:\n\n\nvar helpers = burpCallbacks.getHelpers(); // get our instance of the ExtensionHelpersBridge.\n\nvar httpService = helpers.buildHttpService2('www.google.com', 80, true); \nvar requestResponse = burpCallbacks.makeHttpRequest(\n    httpService, \n    'GET / HTTP/1.1\\r\\nHost: www.google.com\\r\\n\\r\\n'\n);\n\nvar responseInfo = burpCallbacks.analyzeResponse(requestResponse.getResponse());\nalert(\nReceived Status: \n + responseInfo.getStatusCode());", 
            "title": "Overview"
        }, 
        {
            "location": "/API/helpers-api/", 
            "text": "analyzeRequest(Object request)\n\n\nThis method can be used to analyze an HTTP request, and obtain various key details about it.  The resulting \nIRequestInfo\n object will not include the full request URL if \nrequest\n is not an \nIHttpRequestResponse\n object. Alternatively, one can obtain the full URL by using the \nanalyzeRequest2()\n method. \n\n\nParameters:\n\n\n\n\nrequest\n - A Java \nbyte[]\n, \nString\n, or \nIHttpRequestResponse\n object containing the request to be analyzed.\n\n\n\n\nReturns:\n\nAn \nIRequestInfo\n object that can be queried to obtain details about the request.\n\n\nExample:\n\n\nvar requestInfo = helpers.analyzeRequest('GET / HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n');\nrequestInfo.getMethod(); // returns 'GET'\n\n\n\n\n\n\nanalyzeRequest2(IHttpService httpService, Object request)\n\n\nThis method can be used to analyze an HTTP request, and obtain various key details about it.\n\n\nParameters:\n\n\n\n\nhttpService\n - The HTTP service associated with the request. This is optional and may be \nnull\n, in which case the resulting \nIRequestInfo\n object will not include the full request URL.\n\n\nrequest\n - A Java \nbyte[]\n or \nString\n object the request to be analyzed.\n\n\n\n\nReturns:\n\nAn \nIRequestInfo\n object that can be queried to obtain details about the request.\n\n\nExample:\n\n\nvar requestInfo = helpers.analyzeRequest('GET / HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n');\nrequestInfo.getMethod(); // returns 'GET'\n\n\n\n\n\n\nanalyzeResponse(Object response)\n\n\nThis method can be used to analyze an HTTP response, and obtain various key details about it.\n\n\nParameters:\n\n\n\n\nresponse\n - a Java \nbyte[]\n or \nString\n object containing the response to be analyzed.\n\n\n\n\nReturns:\n\nAn \nIResponseInfo\n object that can be queried to obtain details about the response.\n\n\nExample:\n\n\nvar responseInfo = helpers.analyzeResponse('HTTP/1.1 200 OK\\r\\nDate: Fri, 06 Nov 2009 00:35:42 GMT\\r\\nServer: Apache\\r\\nContent-Length: 0\\r\\nKeep-Alive: timeout=15, max=100\\r\\nConnection: Keep-Alive\\r\\nContent-Type: text/plain\\r\\n\\r\\n');\nresponseInfo.getStatusCode(); // returns 200\n\n\n\n\n\n\ngetRequestParameter(Object request, String parameterName)\n\n\nThis method can be used to retrieve details of a specified parameter within an HTTP request. \nNote:\n Use \nanalyzeRequest()\n to obtain details of all parameters within the request. \n\n\nParameters:\n\n\n\n\nrequest\n - a Java \nbyte[]\n or \nString\n object containing the request to be inspected for the specified parameter..\n\n\nparameterName\n - The name of the parameter to retrieve.\n\n\n\n\nReturns:\n\nAn \nIParameter\n object that can be queried to obtain details about the parameter, or \nnull\n if the parameter was not found.\n\n\nExample:\n\n\nvar parameter = helpers.getRequestParameter('GET /?q=foo HTTP/1.1\\r\\nHost: www.bar.com\\r\\n\\r\\n', 'q');\nparameter.getValue(); // returns 'foo'\n\n\n\n\n\n\nurlDecode(String data)\n\n\nThis method can be used to URL-decode the specified data.\n\n\nParameters:\n\n\n\n\ndata\n - a Java \nbyte[]\n or \nString\n object containing the data to be URL decoded.\n\n\n\n\nReturns:\n\nThe decoded data as a \nString\n.\n\n\nExample:\n\n\nhelpers.urlDecode('%3cscript%3e'); // returns '\nscript\n'\n\n\n\n\n\n\nurlDecode2(Object data)\n\n\nThis method can be used to URL-decode the specified data. \n\n\nParameters:\n\n\n\n\ndata\n - a Java \nbyte[]\n or \nString\n object containing the data to be URL decoded.\n\n\n\n\nReturns:\n\nThe decoded data as a \nbyte[]\n.\n\n\nExample:\n\n\nhelpers.urlDecode2('f%2fb'); // returns Java byte[]{'f', '/', 'b'}\n\n\n\n\n\n\nurlEncode(String data)\n\n\nThis method can be used to URL-encode the specified data. Any characters that do not need to be encoded within HTTP requests are not encoded.\n\n\nParameters:\n\n\n\n\ndata\n - The data to be URL encoded.\n\n\n\n\nReturns:\n\nThe encoded data as a \nString\n.\n\n\nExample:\n\n\nhelpers.urlEncode('foo/bar');  // returns 'foo%2fbar'\n\n\n\n\n\n\nurlEncode2(Object data)\n\n\nThis method can be used to URL-encode the specified data. Any characters that do not need to be encoded within HTTP requests are not encoded. \n\n\nParameters:\n\n\n\n\ndata\n - a Java \nbyte[]\n or \nString\n object containing the data to be URL encoded.\n\n\n\n\nReturns:\n\nThe encoded data as a \nbyte[]\n.\n\n\nExample:\n\n\nhelpers.urlEncode2('f/b'); // returns Java byte[] {'f', '%', '2', 'f', 'b'}\n\n\n\n\n\n\nbase64Decode(Object data)\n\n\nThis method can be used to Base64-encode the specified data. \ndata\n can be a Java \nbyte[]\n array or a \nString\n.\n\n\nParameters:\n\n\n\n\ndata\n - a Java \nbyte[]\n or \nString\n object containing the data to be Base64 decoded.\n\n\n\n\nReturns:\n\nThe decoded data as a \nbyte[]\n.\n\n\nExample:\n\n\nhelpers.base64Decode('Zm9v'); // returns Java byte[] {'f', 'o', 'o'}\n\n\n\n\n\n\nbase64Decode2(Object data)\n\n\nThis method can be used to Base64-encode the specified data. \n\n\nParameters:\n\n\n\n\ndata\n - a Java \nbyte[]\n or \nString\n object containing the data to be Base64 decoded.\n\n\n\n\nReturns:\n\nThe Base64 decoded data as a \nString\n.\n\n\nExample:\n\n\nhelpers.base64Decode2('Zm9v'); // returns 'foo'\n\n\n\n\n\n\nbase64Encode(Object data)\n\n\nThis method can be used to Base64-encode the specified data. \ndata\n can either be a Java \nbyte[]\n array or a \nString\n.\n\n\n\n\ndata\n - Java \nbyte[]\n or \nString\n object containin the data to be Base64 encoded.\n\n\n\n\nReturns:\n\nThe Base64 encoded data.\n\n\nExample:\n\n\nhelpers.base64Encode('foo'); // returns 'Zm9v'\n\n\n\n\n\n\nstringToBytes(String data)\n\n\nThis method can be used to convert data from String form into an array of bytes. The conversion does not reflect any particular character set, and a character with the hex representation \n0xWXYZ\n will always be converted into a byte with the representation \n0xYZ\n. It performs the opposite conversion to the method \nbytesToString()\n, and byte-based data that is converted to a String and back again using these two methods is guaranteed to retain its integrity (which may not be the case with conversions that reflect a given character set).\n\n\nParameters:\n\n\n\n\ndata\n - The data to be converted.\n\n\n\n\nReturns:\n\nThe converted data.\n\n\nExample:\n\n\nhelpers.stringToBytes('abc'); // returns Java byte[] {'a', 'b', 'c'}\n\n\n\n\n\n\nbytesToString(byte[] data)\n\n\nThis method can be used to convert data from an array of bytes into String form. The conversion does not reflect any particular character set, and a byte with the representation \n0xYZ\n will always be converted into a character with the hex representation \n0x00YZ\n. It performs the opposite conversion to the method \nstringToBytes()\n, and byte-based data that is converted to a String and back again using these two methods is guaranteed to retain its integrity (which may not be the case with conversions that reflect a given character set).\n\n\nParameters:\n\n\n\n\ndata\n - The data to be converted.\n\n\n\n\nReturns:\n\nThe converted data.\n\n\nExample:\n\n\nhelpers.bytesToString(helpers.stringToBytes('abc')); // returns 'abc'\n\n\n\n\n\n\nindexOf(Object data, Object pattern, boolean caseSensitive, int from, int to)\n\n\nThis method searches a piece of data for the first occurrence of a specified pattern. It works on byte-based data in a way that is similar to the way the native Java method \nString.indexOf()\n works on String-based data.\n\n\nParameters:\n\n\n\n\ndata\n - A Java \nbyte[]\n or \nString\n object containing the data to be searched.\n\n\npattern\n - A Java \nbyte[]\n or \nString\n object containing the pattern to be searched for.\n\n\ncaseSensitive\n - Flags whether or not the search is case-sensitive.\n\n\nfrom\n - The offset within data where the search should begin.\n\n\nto\n - The offset within data where the search should end.\n\n\n\n\nReturns:\n\nThe offset of the first occurrence of the pattern within the specified bounds, or \n-1\n if no match is found.\n\n\nExample:\n\n\nhelpers.indexOf('GET /?q=foo HTTP/1.1\\r\\n', '/?q=foo', true, 0, 10); // returns 5;\nhelpers.indexOf('GET /?q=foo HTTP/1.1\\r\\n', '/?Q=foo', true, 0, 10); // returns -1;\n\n\n\n\n\n\nbuildHttpMessage(Object headers, Object body)\n\n\nThis method builds an HTTP message containing the specified headers and message body. If applicable, the Content-Length header will be added or updated, based on the length of the body. \nbody\n can be either a Java \nbyte[]\n array or a \nString\n\n\nParameters:\n\n\n\n\nheaders\n - A Java \nList\nString\n or a JavaScript \nString\n array containing the headers to include in the message.\n\n\nbody\n - The body of the message, of null if the message has an empty body.\n\n\n\n\nReturns:\n\nThe resulting full HTTP message.\n\n\nExample:\n\n\nvar message = helpers.buildHttpMessage(['GET / HTTP/1.1', 'Host: foo.com'], ''); // returns a Java byte[] array containing HTTP request\n\n\n\n\n\n\nbuildHttpRequest(String url)\n\n\nThis method creates a GET request to the specified URL. The headers used in the request are determined by the Request headers settings as configured in Burp Spider's options.\n\n\nParameters:\n\n\n\n\nurl\n - a \nString\n containing the URL to which the request should be made.\n\n\n\n\nReturns:\n\nA request to the specified URL.\n\n\nExample:\n\n\nvar message = helpers.buildHttpRequest('http://www.bar.com');\n\n\n\n\n\n\naddParameter(Object request, IParameter parameter)\n\n\nThis method adds a new parameter to an HTTP request, and if appropriate updates the Content-Length header.  See \nbuildParameter()\n for information on building parameters.\n\n\nParameters\n:\n\n\n\n\nrequest\n - a Java \nbyte[]\n array or a \nString\n containing the request to which the parameter should be added.\n\n\nparameter\n - An IParameter object containing details of the parameter to be added. Supported parameter types are: \nPARAM_URL\n, \nPARAM_BODY\n and \nPARAM_COOKIE\n.\n\n\n\n\nReturns\n:\nA new HTTP request with the new parameter added.\n\n\nExample:\n\n\nvar newMessage = helpers.addParameter(\n    'GET / HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n',\n    helpers.buildParameter('q', 'bar', burpCallbacks.PARAM_URL)\n); // returns 'GET /?q=bar' HTTP request.\n\n\n\n\n\n\nremoveParameter(Object request, IParameter parameter)\n\n\nThis method removes a parameter from an HTTP request, and if appropriate updates the Content-Length header.\n\n\nParameters:\n\n\n\n\nrequest\n - a Java \nbyte[]\n array or a \nString\n containing the request from which the parameter should be removed.\n\n\nparameter\n - An IParameter object containing details of the parameter to be removed. Supported parameter types are: \nPARAM_URL\n, \nPARAM_BODY\n and \nPARAM_COOKIE\n.\n\n\n\n\nReturns:\n\nA new HTTP request with the parameter removed.\n\n\nExample:\n\n\nvar request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n';\nvar requestInfo = helpers.analyzeRequest(request); // parse the request\nvar parameters = requestInfo.getParameters(); // get its parameters\nvar newMessage = helpers.removeParameter(\n    message, \n    parameters[0]\n); // remove 'q' parameter from GET request\n\n\n\n\n\n\nupdateParameter(Object request, IParameter parameter)\n\n\nThis method updates the value of a parameter within an HTTP request, and if appropriate updates the \nContent-Length\n header. Note: This method can only be used to update the value of an existing parameter of a specified type. If you need to change the type of an existing parameter, you should first call \nremoveParameter()\n to remove the parameter with the old type, and then call \naddParameter()\n to add a parameter with the new type. \n\n\nParameters\n:\n\n\n\n\nrequest\n - The request containing the parameter to be updated as a Java \nbyte[]\n array or a \nString\n.\n\n\nparameter\n - An IParameter object containing details of the parameter to be updated. Supported parameter types are: \nPARAM_URL\n, \nPARAM_BODY\n and \nPARAM_COOKIE\n.\n\n\n\n\nReturns\n:\n A new HTTP request with the parameter updated.\n\n\nExample:\n\n\nvar request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n';\nvar newMessage = helpers.updateParameter(\n    message, \n    helpers.buildParameter('q', 'bar2')\n); // updates value of 'q' parameter to 'bar2'\n\n\n\n\n\n\ntoggleRequestMethod(Object request)\n\n\nThis method can be used to toggle a request's method between \nGET\n and \nPOST\n. Parameters are relocated between the URL query string and message body as required, and the \nContent-Length\n header is created or removed as applicable. \n\n\nParameters\n:\n\n\n\n\nrequest\n - a Java \nbyte[]\n array or \nString\n containing the HTTP request whose method should be toggled.\n\n\n\n\nReturns:\n\nA new HTTP request using the toggled method.\n\n\nExample:\n\n\nvar request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n'; \nrequest = helpers.toggleRequestMethod(request); // Changes GET to POST request\n\n\n\n\n\n\nbuildHttpService(String host, int port, String protocol)\n\n\nThis method constructs an \nIHttpService\n object based on the details provided.\n\n\nParameters\n:\n\n\n\n\nhost\n - The HTTP service host.\n\n\nport\n - The HTTP service port.\n\n\nprotocol\n - The HTTP service protocol (i.e. \n'http'\n or \n'https'\n).\n\n\n\n\nReturns:\n\nAn \nIHttpService\n object based on the details provided.\n\n\nExample:\n\n\nvar httpService = helpers.buildHttpService('foo.com', 80, 'http');\n\n\n\n\n\n\nbuildHttpService2(String host, int port, boolean useHttps)\n\n\nThis method constructs an \nIHttpService\n object based on the details provided.\n\n\nParameters\n:\n\n\n\n\nhost\n - The HTTP service host.\n\n\nport\n - The HTTP service port.\n\n\nuseHttps\n - Flags whether the HTTP service protocol is HTTPS or HTTP.\n\n\n\n\nReturns:\n\nAn \nIHttpService\n object based on the details provided.\n\n\nExample:\n\n\nvar httpService = helpers.buildHttpService2('foo.com', 80, true); // SSL enabled service\n\n\n\n\n\n\nbuildParameter(String name, String value, int type)\n\n\nThis method constructs an \nIParameter\n object based on the details provided.\n\n\nParameters:\n\n\n\n\nname\n - The parameter name.\n\n\nvalue\n - The parameter value.\n\n\ntype\n - The parameter type, as defined in the \nburpCallbacks\n object beginning with the \nPARAM_\n prefix.\n\n\n\n\nReturns:\n\nAn \nIParameter\n object based on the details provided.\n\n\nExample:\n\n\nvar parameter = helpers.buildParameter('foo', 'bar', burpCallbacks.PARAM_URL); // builds a GET parameter 'foo=bar'\n\n\n\n\n\n\nmakeScannerInsertionPoint(String insertionPointName, Object baseRequest, int from, int to)\n\n\nThis method constructs an \nIScannerInsertionPoint\n object based on the details provided. It can be used to quickly create a simple insertion point based on a fixed payload location within a base request.\n\n\nParameters:\n\n\n\n\ninsertionPointName\n - The name of the insertion point.\n\n\nbaseRequest\n - A Java \nbyte[]\n array or \nString\n containing the request from which to build scan requests.\n\n\nfrom\n - The offset of the start of the payload location.\n\n\nto\n - The offset of the end of the payload location.\n\n\n\n\nReturns:\n\nAn \nIScannerInsertionPoint\n object based on the details provided.\n\n\nExample:\n\n\nvar request = 'GET /?q=bar HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n'\nvar requestInfo = helpers.analyzeRequest(request);\n\n// get 'q' parameter\nvar parameter = requestInfo.getParameters()[0];\n\nvar insertionPoint = helpers.makeScannerInsertionPoint(\n    '\nq\n Parameter Insertion Point', \n    request,\n    parameter.getValueStart(),\n    parameter.getValueEnd()\n); // defines value of 'q' parameter ('bar') as insertion point", 
            "title": "Methods"
        }, 
        {
            "location": "/API/helpers-api/#analyzerequestobject-request", 
            "text": "This method can be used to analyze an HTTP request, and obtain various key details about it.  The resulting  IRequestInfo  object will not include the full request URL if  request  is not an  IHttpRequestResponse  object. Alternatively, one can obtain the full URL by using the  analyzeRequest2()  method.   Parameters:   request  - A Java  byte[] ,  String , or  IHttpRequestResponse  object containing the request to be analyzed.   Returns: \nAn  IRequestInfo  object that can be queried to obtain details about the request.  Example:  var requestInfo = helpers.analyzeRequest('GET / HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n');\nrequestInfo.getMethod(); // returns 'GET'", 
            "title": "analyzeRequest(Object request)"
        }, 
        {
            "location": "/API/helpers-api/#analyzerequest2ihttpservice-httpservice-object-request", 
            "text": "This method can be used to analyze an HTTP request, and obtain various key details about it.  Parameters:   httpService  - The HTTP service associated with the request. This is optional and may be  null , in which case the resulting  IRequestInfo  object will not include the full request URL.  request  - A Java  byte[]  or  String  object the request to be analyzed.   Returns: \nAn  IRequestInfo  object that can be queried to obtain details about the request.  Example:  var requestInfo = helpers.analyzeRequest('GET / HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n');\nrequestInfo.getMethod(); // returns 'GET'", 
            "title": "analyzeRequest2(IHttpService httpService, Object request)"
        }, 
        {
            "location": "/API/helpers-api/#analyzeresponseobject-response", 
            "text": "This method can be used to analyze an HTTP response, and obtain various key details about it.  Parameters:   response  - a Java  byte[]  or  String  object containing the response to be analyzed.   Returns: \nAn  IResponseInfo  object that can be queried to obtain details about the response.  Example:  var responseInfo = helpers.analyzeResponse('HTTP/1.1 200 OK\\r\\nDate: Fri, 06 Nov 2009 00:35:42 GMT\\r\\nServer: Apache\\r\\nContent-Length: 0\\r\\nKeep-Alive: timeout=15, max=100\\r\\nConnection: Keep-Alive\\r\\nContent-Type: text/plain\\r\\n\\r\\n');\nresponseInfo.getStatusCode(); // returns 200", 
            "title": "analyzeResponse(Object response)"
        }, 
        {
            "location": "/API/helpers-api/#getrequestparameterobject-request-string-parametername", 
            "text": "This method can be used to retrieve details of a specified parameter within an HTTP request.  Note:  Use  analyzeRequest()  to obtain details of all parameters within the request.   Parameters:   request  - a Java  byte[]  or  String  object containing the request to be inspected for the specified parameter..  parameterName  - The name of the parameter to retrieve.   Returns: \nAn  IParameter  object that can be queried to obtain details about the parameter, or  null  if the parameter was not found.  Example:  var parameter = helpers.getRequestParameter('GET /?q=foo HTTP/1.1\\r\\nHost: www.bar.com\\r\\n\\r\\n', 'q');\nparameter.getValue(); // returns 'foo'", 
            "title": "getRequestParameter(Object request, String parameterName)"
        }, 
        {
            "location": "/API/helpers-api/#urldecodestring-data", 
            "text": "This method can be used to URL-decode the specified data.  Parameters:   data  - a Java  byte[]  or  String  object containing the data to be URL decoded.   Returns: \nThe decoded data as a  String .  Example:  helpers.urlDecode('%3cscript%3e'); // returns ' script '", 
            "title": "urlDecode(String data)"
        }, 
        {
            "location": "/API/helpers-api/#urldecode2object-data", 
            "text": "This method can be used to URL-decode the specified data.   Parameters:   data  - a Java  byte[]  or  String  object containing the data to be URL decoded.   Returns: \nThe decoded data as a  byte[] .  Example:  helpers.urlDecode2('f%2fb'); // returns Java byte[]{'f', '/', 'b'}", 
            "title": "urlDecode2(Object data)"
        }, 
        {
            "location": "/API/helpers-api/#urlencodestring-data", 
            "text": "This method can be used to URL-encode the specified data. Any characters that do not need to be encoded within HTTP requests are not encoded.  Parameters:   data  - The data to be URL encoded.   Returns: \nThe encoded data as a  String .  Example:  helpers.urlEncode('foo/bar');  // returns 'foo%2fbar'", 
            "title": "urlEncode(String data)"
        }, 
        {
            "location": "/API/helpers-api/#urlencode2object-data", 
            "text": "This method can be used to URL-encode the specified data. Any characters that do not need to be encoded within HTTP requests are not encoded.   Parameters:   data  - a Java  byte[]  or  String  object containing the data to be URL encoded.   Returns: \nThe encoded data as a  byte[] .  Example:  helpers.urlEncode2('f/b'); // returns Java byte[] {'f', '%', '2', 'f', 'b'}", 
            "title": "urlEncode2(Object data)"
        }, 
        {
            "location": "/API/helpers-api/#base64decodeobject-data", 
            "text": "This method can be used to Base64-encode the specified data.  data  can be a Java  byte[]  array or a  String .  Parameters:   data  - a Java  byte[]  or  String  object containing the data to be Base64 decoded.   Returns: \nThe decoded data as a  byte[] .  Example:  helpers.base64Decode('Zm9v'); // returns Java byte[] {'f', 'o', 'o'}", 
            "title": "base64Decode(Object data)"
        }, 
        {
            "location": "/API/helpers-api/#base64decode2object-data", 
            "text": "This method can be used to Base64-encode the specified data.   Parameters:   data  - a Java  byte[]  or  String  object containing the data to be Base64 decoded.   Returns: \nThe Base64 decoded data as a  String .  Example:  helpers.base64Decode2('Zm9v'); // returns 'foo'", 
            "title": "base64Decode2(Object data)"
        }, 
        {
            "location": "/API/helpers-api/#base64encodeobject-data", 
            "text": "This method can be used to Base64-encode the specified data.  data  can either be a Java  byte[]  array or a  String .   data  - Java  byte[]  or  String  object containin the data to be Base64 encoded.   Returns: \nThe Base64 encoded data.  Example:  helpers.base64Encode('foo'); // returns 'Zm9v'", 
            "title": "base64Encode(Object data)"
        }, 
        {
            "location": "/API/helpers-api/#stringtobytesstring-data", 
            "text": "This method can be used to convert data from String form into an array of bytes. The conversion does not reflect any particular character set, and a character with the hex representation  0xWXYZ  will always be converted into a byte with the representation  0xYZ . It performs the opposite conversion to the method  bytesToString() , and byte-based data that is converted to a String and back again using these two methods is guaranteed to retain its integrity (which may not be the case with conversions that reflect a given character set).  Parameters:   data  - The data to be converted.   Returns: \nThe converted data.  Example:  helpers.stringToBytes('abc'); // returns Java byte[] {'a', 'b', 'c'}", 
            "title": "stringToBytes(String data)"
        }, 
        {
            "location": "/API/helpers-api/#bytestostringbyte-data", 
            "text": "This method can be used to convert data from an array of bytes into String form. The conversion does not reflect any particular character set, and a byte with the representation  0xYZ  will always be converted into a character with the hex representation  0x00YZ . It performs the opposite conversion to the method  stringToBytes() , and byte-based data that is converted to a String and back again using these two methods is guaranteed to retain its integrity (which may not be the case with conversions that reflect a given character set).  Parameters:   data  - The data to be converted.   Returns: \nThe converted data.  Example:  helpers.bytesToString(helpers.stringToBytes('abc')); // returns 'abc'", 
            "title": "bytesToString(byte[] data)"
        }, 
        {
            "location": "/API/helpers-api/#indexofobject-data-object-pattern-boolean-casesensitive-int-from-int-to", 
            "text": "This method searches a piece of data for the first occurrence of a specified pattern. It works on byte-based data in a way that is similar to the way the native Java method  String.indexOf()  works on String-based data.  Parameters:   data  - A Java  byte[]  or  String  object containing the data to be searched.  pattern  - A Java  byte[]  or  String  object containing the pattern to be searched for.  caseSensitive  - Flags whether or not the search is case-sensitive.  from  - The offset within data where the search should begin.  to  - The offset within data where the search should end.   Returns: \nThe offset of the first occurrence of the pattern within the specified bounds, or  -1  if no match is found.  Example:  helpers.indexOf('GET /?q=foo HTTP/1.1\\r\\n', '/?q=foo', true, 0, 10); // returns 5;\nhelpers.indexOf('GET /?q=foo HTTP/1.1\\r\\n', '/?Q=foo', true, 0, 10); // returns -1;", 
            "title": "indexOf(Object data, Object pattern, boolean caseSensitive, int from, int to)"
        }, 
        {
            "location": "/API/helpers-api/#buildhttpmessageobject-headers-object-body", 
            "text": "This method builds an HTTP message containing the specified headers and message body. If applicable, the Content-Length header will be added or updated, based on the length of the body.  body  can be either a Java  byte[]  array or a  String  Parameters:   headers  - A Java  List String  or a JavaScript  String  array containing the headers to include in the message.  body  - The body of the message, of null if the message has an empty body.   Returns: \nThe resulting full HTTP message.  Example:  var message = helpers.buildHttpMessage(['GET / HTTP/1.1', 'Host: foo.com'], ''); // returns a Java byte[] array containing HTTP request", 
            "title": "buildHttpMessage(Object headers, Object body)"
        }, 
        {
            "location": "/API/helpers-api/#buildhttprequeststring-url", 
            "text": "This method creates a GET request to the specified URL. The headers used in the request are determined by the Request headers settings as configured in Burp Spider's options.  Parameters:   url  - a  String  containing the URL to which the request should be made.   Returns: \nA request to the specified URL.  Example:  var message = helpers.buildHttpRequest('http://www.bar.com');", 
            "title": "buildHttpRequest(String url)"
        }, 
        {
            "location": "/API/helpers-api/#addparameterobject-request-iparameter-parameter", 
            "text": "This method adds a new parameter to an HTTP request, and if appropriate updates the Content-Length header.  See  buildParameter()  for information on building parameters.  Parameters :   request  - a Java  byte[]  array or a  String  containing the request to which the parameter should be added.  parameter  - An IParameter object containing details of the parameter to be added. Supported parameter types are:  PARAM_URL ,  PARAM_BODY  and  PARAM_COOKIE .   Returns :\nA new HTTP request with the new parameter added.  Example:  var newMessage = helpers.addParameter(\n    'GET / HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n',\n    helpers.buildParameter('q', 'bar', burpCallbacks.PARAM_URL)\n); // returns 'GET /?q=bar' HTTP request.", 
            "title": "addParameter(Object request, IParameter parameter)"
        }, 
        {
            "location": "/API/helpers-api/#removeparameterobject-request-iparameter-parameter", 
            "text": "This method removes a parameter from an HTTP request, and if appropriate updates the Content-Length header.  Parameters:   request  - a Java  byte[]  array or a  String  containing the request from which the parameter should be removed.  parameter  - An IParameter object containing details of the parameter to be removed. Supported parameter types are:  PARAM_URL ,  PARAM_BODY  and  PARAM_COOKIE .   Returns: \nA new HTTP request with the parameter removed.  Example:  var request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n';\nvar requestInfo = helpers.analyzeRequest(request); // parse the request\nvar parameters = requestInfo.getParameters(); // get its parameters\nvar newMessage = helpers.removeParameter(\n    message, \n    parameters[0]\n); // remove 'q' parameter from GET request", 
            "title": "removeParameter(Object request, IParameter parameter)"
        }, 
        {
            "location": "/API/helpers-api/#updateparameterobject-request-iparameter-parameter", 
            "text": "This method updates the value of a parameter within an HTTP request, and if appropriate updates the  Content-Length  header. Note: This method can only be used to update the value of an existing parameter of a specified type. If you need to change the type of an existing parameter, you should first call  removeParameter()  to remove the parameter with the old type, and then call  addParameter()  to add a parameter with the new type.   Parameters :   request  - The request containing the parameter to be updated as a Java  byte[]  array or a  String .  parameter  - An IParameter object containing details of the parameter to be updated. Supported parameter types are:  PARAM_URL ,  PARAM_BODY  and  PARAM_COOKIE .   Returns :\n A new HTTP request with the parameter updated.  Example:  var request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n';\nvar newMessage = helpers.updateParameter(\n    message, \n    helpers.buildParameter('q', 'bar2')\n); // updates value of 'q' parameter to 'bar2'", 
            "title": "updateParameter(Object request, IParameter parameter)"
        }, 
        {
            "location": "/API/helpers-api/#togglerequestmethodobject-request", 
            "text": "This method can be used to toggle a request's method between  GET  and  POST . Parameters are relocated between the URL query string and message body as required, and the  Content-Length  header is created or removed as applicable.   Parameters :   request  - a Java  byte[]  array or  String  containing the HTTP request whose method should be toggled.   Returns: \nA new HTTP request using the toggled method.  Example:  var request = 'GET /?q=bar HTTP/1.1\\r\\nHost: www.foo.com\\r\\n\\r\\n'; \nrequest = helpers.toggleRequestMethod(request); // Changes GET to POST request", 
            "title": "toggleRequestMethod(Object request)"
        }, 
        {
            "location": "/API/helpers-api/#buildhttpservicestring-host-int-port-string-protocol", 
            "text": "This method constructs an  IHttpService  object based on the details provided.  Parameters :   host  - The HTTP service host.  port  - The HTTP service port.  protocol  - The HTTP service protocol (i.e.  'http'  or  'https' ).   Returns: \nAn  IHttpService  object based on the details provided.  Example:  var httpService = helpers.buildHttpService('foo.com', 80, 'http');", 
            "title": "buildHttpService(String host, int port, String protocol)"
        }, 
        {
            "location": "/API/helpers-api/#buildhttpservice2string-host-int-port-boolean-usehttps", 
            "text": "This method constructs an  IHttpService  object based on the details provided.  Parameters :   host  - The HTTP service host.  port  - The HTTP service port.  useHttps  - Flags whether the HTTP service protocol is HTTPS or HTTP.   Returns: \nAn  IHttpService  object based on the details provided.  Example:  var httpService = helpers.buildHttpService2('foo.com', 80, true); // SSL enabled service", 
            "title": "buildHttpService2(String host, int port, boolean useHttps)"
        }, 
        {
            "location": "/API/helpers-api/#buildparameterstring-name-string-value-int-type", 
            "text": "This method constructs an  IParameter  object based on the details provided.  Parameters:   name  - The parameter name.  value  - The parameter value.  type  - The parameter type, as defined in the  burpCallbacks  object beginning with the  PARAM_  prefix.   Returns: \nAn  IParameter  object based on the details provided.  Example:  var parameter = helpers.buildParameter('foo', 'bar', burpCallbacks.PARAM_URL); // builds a GET parameter 'foo=bar'", 
            "title": "buildParameter(String name, String value, int type)"
        }, 
        {
            "location": "/API/helpers-api/#makescannerinsertionpointstring-insertionpointname-object-baserequest-int-from-int-to", 
            "text": "This method constructs an  IScannerInsertionPoint  object based on the details provided. It can be used to quickly create a simple insertion point based on a fixed payload location within a base request.  Parameters:   insertionPointName  - The name of the insertion point.  baseRequest  - A Java  byte[]  array or  String  containing the request from which to build scan requests.  from  - The offset of the start of the payload location.  to  - The offset of the end of the payload location.   Returns: \nAn  IScannerInsertionPoint  object based on the details provided.  Example:  var request = 'GET /?q=bar HTTP/1.1\\r\\nHost: foo.com\\r\\n\\r\\n'\nvar requestInfo = helpers.analyzeRequest(request);\n\n// get 'q' parameter\nvar parameter = requestInfo.getParameters()[0];\n\nvar insertionPoint = helpers.makeScannerInsertionPoint(\n    ' q  Parameter Insertion Point', \n    request,\n    parameter.getValueStart(),\n    parameter.getValueEnd()\n); // defines value of 'q' parameter ('bar') as insertion point", 
            "title": "makeScannerInsertionPoint(String insertionPointName, Object baseRequest, int from, int to)"
        }
    ]
}